{"version":3,"file":"index.es.js","sources":["../src/math/Vector3.ts","../src/math/Quaternion.ts","../src/events/EventDispatcher.ts","../src/math/Matrix4.ts","../src/events/Events.ts","../src/core/Object3D.ts","../src/math/Matrix3.ts","../src/splats/SplatData.ts","../src/splats/SplatvData.ts","../src/utils/Converter.ts","../src/math/Box3.ts","../src/splats/Splat.ts","../src/splats/Splatv.ts","../src/cameras/CameraData.ts","../src/math/Vector4.ts","../src/cameras/Camera.ts","../src/core/Scene.ts","../src/utils/LoaderUtils.ts","../src/loaders/Loader.ts","../src/loaders/PLYLoader.ts","../src/loaders/SplatvLoader.ts","../src/renderers/webgl/programs/ShaderProgram.ts","../src/wasm/data.js","../src/renderers/webgl/utils/RenderData.ts","../src/math/Color32.ts","../src/renderers/webgl/programs/RenderProgram.ts","../src/renderers/webgl/passes/FadeInPass.ts","../src/renderers/WebGLRenderer.ts","../src/controls/OrbitControls.ts","../src/controls/FPSControls.ts","../src/math/Plane.ts","../src/renderers/webgl/passes/ShaderPass.ts","../src/renderers/webgl/programs/VideoRenderProgram.ts","../src/math/BVH.ts","../src/renderers/webgl/utils/IntersectionTester.ts"],"sourcesContent":["import { Matrix4 } from \"./Matrix4\";\n\nclass Vector3 {\n    public readonly x: number;\n    public readonly y: number;\n    public readonly z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    equals(v: Vector3): boolean {\n        if (this.x !== v.x) {\n            return false;\n        }\n        if (this.y !== v.y) {\n            return false;\n        }\n        if (this.z !== v.z) {\n            return false;\n        }\n\n        return true;\n    }\n\n    add(v: number): Vector3;\n    add(v: Vector3): Vector3;\n    add(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x + v, this.y + v, this.z + v);\n        } else {\n            return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\n        }\n    }\n\n    subtract(v: number): Vector3;\n    subtract(v: Vector3): Vector3;\n    subtract(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x - v, this.y - v, this.z - v);\n        } else {\n            return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\n        }\n    }\n\n    multiply(v: number): Vector3;\n    multiply(v: Vector3): Vector3;\n    multiply(v: Matrix4): Vector3;\n    multiply(v: number | Vector3 | Matrix4): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x * v, this.y * v, this.z * v);\n        } else if (v instanceof Vector3) {\n            return new Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\n        } else {\n            return new Vector3(\n                this.x * v.buffer[0] + this.y * v.buffer[4] + this.z * v.buffer[8] + v.buffer[12],\n                this.x * v.buffer[1] + this.y * v.buffer[5] + this.z * v.buffer[9] + v.buffer[13],\n                this.x * v.buffer[2] + this.y * v.buffer[6] + this.z * v.buffer[10] + v.buffer[14],\n            );\n        }\n    }\n\n    divide(v: number): Vector3;\n    divide(v: Vector3): Vector3;\n    divide(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x / v, this.y / v, this.z / v);\n        } else {\n            return new Vector3(this.x / v.x, this.y / v.y, this.z / v.z);\n        }\n    }\n\n    cross(v: Vector3): Vector3 {\n        const x = this.y * v.z - this.z * v.y;\n        const y = this.z * v.x - this.x * v.z;\n        const z = this.x * v.y - this.y * v.x;\n\n        return new Vector3(x, y, z);\n    }\n\n    dot(v: Vector3): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    lerp(v: Vector3, t: number): Vector3 {\n        return new Vector3(this.x + (v.x - this.x) * t, this.y + (v.y - this.y) * t, this.z + (v.z - this.z) * t);\n    }\n\n    min(v: Vector3): Vector3 {\n        return new Vector3(Math.min(this.x, v.x), Math.min(this.y, v.y), Math.min(this.z, v.z));\n    }\n\n    max(v: Vector3): Vector3 {\n        return new Vector3(Math.max(this.x, v.x), Math.max(this.y, v.y), Math.max(this.z, v.z));\n    }\n\n    getComponent(axis: number) {\n        switch (axis) {\n            case 0:\n                return this.x;\n            case 1:\n                return this.y;\n            case 2:\n                return this.z;\n            default:\n                throw new Error(`Invalid component index: ${axis}`);\n        }\n    }\n\n    minComponent(): number {\n        if (this.x < this.y && this.x < this.z) {\n            return 0;\n        } else if (this.y < this.z) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    maxComponent(): number {\n        if (this.x > this.y && this.x > this.z) {\n            return 0;\n        } else if (this.y > this.z) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    magnitude(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    distanceTo(v: Vector3): number {\n        return Math.sqrt((this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2);\n    }\n\n    normalize(): Vector3 {\n        const length = this.magnitude();\n\n        return new Vector3(this.x / length, this.y / length, this.z / length);\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z];\n    }\n\n    clone(): Vector3 {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n\n    static One(value: number = 1): Vector3 {\n        return new Vector3(value, value, value);\n    }\n}\n\nexport { Vector3 };\n","import { Matrix3 } from \"./Matrix3\";\nimport { Vector3 } from \"./Vector3\";\n\nclass Quaternion {\n    public readonly x: number;\n    public readonly y: number;\n    public readonly z: number;\n    public readonly w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    equals(q: Quaternion): boolean {\n        if (this.x !== q.x) {\n            return false;\n        }\n        if (this.y !== q.y) {\n            return false;\n        }\n        if (this.z !== q.z) {\n            return false;\n        }\n        if (this.w !== q.w) {\n            return false;\n        }\n\n        return true;\n    }\n\n    normalize(): Quaternion {\n        const l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n        return new Quaternion(this.x / l, this.y / l, this.z / l, this.w / l);\n    }\n\n    multiply(q: Quaternion): Quaternion {\n        const w1 = this.w,\n            x1 = this.x,\n            y1 = this.y,\n            z1 = this.z;\n        const w2 = q.w,\n            x2 = q.x,\n            y2 = q.y,\n            z2 = q.z;\n\n        return new Quaternion(\n            w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2,\n            w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2,\n            w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2,\n            w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2,\n        );\n    }\n\n    inverse(): Quaternion {\n        const l = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n        return new Quaternion(-this.x / l, -this.y / l, -this.z / l, this.w / l);\n    }\n\n    apply(v: Vector3): Vector3 {\n        const vecQuat = new Quaternion(v.x, v.y, v.z, 0);\n        const conjugate = new Quaternion(-this.x, -this.y, -this.z, this.w);\n        const rotatedQuat = this.multiply(vecQuat).multiply(conjugate);\n        return new Vector3(rotatedQuat.x, rotatedQuat.y, rotatedQuat.z);\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z, this.w];\n    }\n\n    clone(): Quaternion {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n\n    static FromEuler(e: Vector3): Quaternion {\n        const halfX = e.x / 2;\n        const halfY = e.y / 2;\n        const halfZ = e.z / 2;\n        const cy = Math.cos(halfY);\n        const sy = Math.sin(halfY);\n        const cp = Math.cos(halfX);\n        const sp = Math.sin(halfX);\n        const cz = Math.cos(halfZ);\n        const sz = Math.sin(halfZ);\n\n        const q = new Quaternion(\n            cy * sp * cz + sy * cp * sz,\n            sy * cp * cz - cy * sp * sz,\n            cy * cp * sz - sy * sp * cz,\n            cy * cp * cz + sy * sp * sz,\n        );\n        return q;\n    }\n\n    toEuler(): Vector3 {\n        const sinr_cosp = 2 * (this.w * this.x + this.y * this.z);\n        const cosr_cosp = 1 - 2 * (this.x * this.x + this.y * this.y);\n        const x = Math.atan2(sinr_cosp, cosr_cosp);\n\n        let y;\n        const sinp = 2 * (this.w * this.y - this.z * this.x);\n        if (Math.abs(sinp) >= 1) {\n            y = (Math.sign(sinp) * Math.PI) / 2;\n        } else {\n            y = Math.asin(sinp);\n        }\n\n        const siny_cosp = 2 * (this.w * this.z + this.x * this.y);\n        const cosy_cosp = 1 - 2 * (this.y * this.y + this.z * this.z);\n        const z = Math.atan2(siny_cosp, cosy_cosp);\n\n        return new Vector3(x, y, z);\n    }\n\n    static FromMatrix3(matrix: Matrix3): Quaternion {\n        const m = matrix.buffer;\n        const trace = m[0] + m[4] + m[8];\n        let x, y, z, w;\n        if (trace > 0) {\n            const s = 0.5 / Math.sqrt(trace + 1.0);\n            w = 0.25 / s;\n            x = (m[7] - m[5]) * s;\n            y = (m[2] - m[6]) * s;\n            z = (m[3] - m[1]) * s;\n        } else if (m[0] > m[4] && m[0] > m[8]) {\n            const s = 2.0 * Math.sqrt(1.0 + m[0] - m[4] - m[8]);\n            w = (m[7] - m[5]) / s;\n            x = 0.25 * s;\n            y = (m[1] + m[3]) / s;\n            z = (m[2] + m[6]) / s;\n        } else if (m[4] > m[8]) {\n            const s = 2.0 * Math.sqrt(1.0 + m[4] - m[0] - m[8]);\n            w = (m[2] - m[6]) / s;\n            x = (m[1] + m[3]) / s;\n            y = 0.25 * s;\n            z = (m[5] + m[7]) / s;\n        } else {\n            const s = 2.0 * Math.sqrt(1.0 + m[8] - m[0] - m[4]);\n            w = (m[3] - m[1]) / s;\n            x = (m[2] + m[6]) / s;\n            y = (m[5] + m[7]) / s;\n            z = 0.25 * s;\n        }\n        return new Quaternion(x, y, z, w);\n    }\n\n    static FromAxisAngle(axis: Vector3, angle: number): Quaternion {\n        const halfAngle = angle / 2;\n        const sin = Math.sin(halfAngle);\n        const cos = Math.cos(halfAngle);\n        return new Quaternion(axis.x * sin, axis.y * sin, axis.z * sin, cos);\n    }\n\n    static LookRotation(direction: Vector3): Quaternion {\n        const forward = new Vector3(0, 0, 1);\n        const dot = forward.dot(direction);\n\n        if (Math.abs(dot - -1.0) < 0.000001) {\n            return new Quaternion(0, 1, 0, Math.PI);\n        }\n        if (Math.abs(dot - 1.0) < 0.000001) {\n            return new Quaternion();\n        }\n\n        const rotAngle = Math.acos(dot);\n        const rotAxis = forward.cross(direction).normalize();\n        return Quaternion.FromAxisAngle(rotAxis, rotAngle);\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Quaternion };\n","class EventDispatcher {\n    addEventListener: (type: string, listener: (event: Event) => void) => void;\n    removeEventListener: (type: string, listener: (event: Event) => void) => void;\n    hasEventListener: (type: string, listener: (event: Event) => void) => boolean;\n    dispatchEvent: (event: Event) => void;\n\n    constructor() {\n        const listeners = new Map<string, Set<(event: Event) => void>>();\n\n        this.addEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                listeners.set(type, new Set());\n            }\n\n            listeners.get(type)!.add(listener);\n        };\n\n        this.removeEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                return;\n            }\n\n            listeners.get(type)!.delete(listener);\n        };\n\n        this.hasEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                return false;\n            }\n\n            return listeners.get(type)!.has(listener);\n        };\n\n        this.dispatchEvent = (event: Event) => {\n            if (!listeners.has(event.type)) {\n                return;\n            }\n\n            for (const listener of listeners.get(event.type)!) {\n                listener(event);\n            }\n        };\n    }\n}\n\nexport { EventDispatcher };\n","import { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\nclass Matrix4 {\n    public readonly buffer: number[];\n\n    // prettier-ignore\n    constructor(n11: number = 1, n12: number = 0, n13: number = 0, n14: number = 0, \n                n21: number = 0, n22: number = 1, n23: number = 0, n24: number = 0, \n                n31: number = 0, n32: number = 0, n33: number = 1, n34: number = 0, \n                n41: number = 0, n42: number = 0, n43: number = 0, n44: number = 1) {\n        this.buffer = [\n            n11, n12, n13, n14, \n            n21, n22, n23, n24, \n            n31, n32, n33, n34, \n            n41, n42, n43, n44\n        ];\n    }\n\n    equals(m: Matrix4): boolean {\n        if (this.buffer.length !== m.buffer.length) {\n            return false;\n        }\n        if (this.buffer === m.buffer) {\n            return true;\n        }\n        for (let i = 0; i < this.buffer.length; i++) {\n            if (this.buffer[i] !== m.buffer[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    multiply(m: Matrix4): Matrix4 {\n        const a = this.buffer;\n        const b = m.buffer;\n        return new Matrix4(\n            b[0] * a[0] + b[1] * a[4] + b[2] * a[8] + b[3] * a[12],\n            b[0] * a[1] + b[1] * a[5] + b[2] * a[9] + b[3] * a[13],\n            b[0] * a[2] + b[1] * a[6] + b[2] * a[10] + b[3] * a[14],\n            b[0] * a[3] + b[1] * a[7] + b[2] * a[11] + b[3] * a[15],\n            b[4] * a[0] + b[5] * a[4] + b[6] * a[8] + b[7] * a[12],\n            b[4] * a[1] + b[5] * a[5] + b[6] * a[9] + b[7] * a[13],\n            b[4] * a[2] + b[5] * a[6] + b[6] * a[10] + b[7] * a[14],\n            b[4] * a[3] + b[5] * a[7] + b[6] * a[11] + b[7] * a[15],\n            b[8] * a[0] + b[9] * a[4] + b[10] * a[8] + b[11] * a[12],\n            b[8] * a[1] + b[9] * a[5] + b[10] * a[9] + b[11] * a[13],\n            b[8] * a[2] + b[9] * a[6] + b[10] * a[10] + b[11] * a[14],\n            b[8] * a[3] + b[9] * a[7] + b[10] * a[11] + b[11] * a[15],\n            b[12] * a[0] + b[13] * a[4] + b[14] * a[8] + b[15] * a[12],\n            b[12] * a[1] + b[13] * a[5] + b[14] * a[9] + b[15] * a[13],\n            b[12] * a[2] + b[13] * a[6] + b[14] * a[10] + b[15] * a[14],\n            b[12] * a[3] + b[13] * a[7] + b[14] * a[11] + b[15] * a[15],\n        );\n    }\n\n    clone(): Matrix4 {\n        const e = this.buffer;\n        // prettier-ignore\n        return new Matrix4(\n            e[0], e[1], e[2], e[3], \n            e[4], e[5], e[6], e[7], \n            e[8], e[9], e[10], e[11], \n            e[12], e[13], e[14], e[15]\n        );\n    }\n\n    determinant(): number {\n        const e = this.buffer;\n        // prettier-ignore\n        return (\n            e[12] * e[9] * e[6] * e[3] - e[8] * e[13] * e[6] * e[3] - e[12] * e[5] * e[10] * e[3] + e[4] * e[13] * e[10] * e[3] +\n            e[8] * e[5] * e[14] * e[3] - e[4] * e[9] * e[14] * e[3] - e[12] * e[9] * e[2] * e[7] + e[8] * e[13] * e[2] * e[7] +\n            e[12] * e[1] * e[10] * e[7] - e[0] * e[13] * e[10] * e[7] - e[8] * e[1] * e[14] * e[7] + e[0] * e[9] * e[14] * e[7] +\n            e[12] * e[5] * e[2] * e[11] - e[4] * e[13] * e[2] * e[11] - e[12] * e[1] * e[6] * e[11] + e[0] * e[13] * e[6] * e[11] +\n            e[4] * e[1] * e[14] * e[11] - e[0] * e[5] * e[14] * e[11] - e[8] * e[5] * e[2] * e[15] + e[4] * e[9] * e[2] * e[15] +\n            e[8] * e[1] * e[6] * e[15] - e[0] * e[9] * e[6] * e[15] - e[4] * e[1] * e[10] * e[15] + e[0] * e[5] * e[10] * e[15]\n        );\n    }\n\n    invert(): Matrix4 {\n        const e = this.buffer;\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible.\");\n        }\n        const invDet = 1 / det;\n        // prettier-ignore\n        return new Matrix4(\n            invDet * (\n                e[5] * e[10] * e[15] - e[5] * e[11] * e[14] - e[9] * e[6] * e[15] + e[9] * e[7] * e[14] + e[13] * e[6] * e[11] - e[13] * e[7] * e[10]\n            ),\n            invDet * (\n                -e[1] * e[10] * e[15] + e[1] * e[11] * e[14] + e[9] * e[2] * e[15] - e[9] * e[3] * e[14] - e[13] * e[2] * e[11] + e[13] * e[3] * e[10]\n            ),\n            invDet * (\n                e[1] * e[6] * e[15] - e[1] * e[7] * e[14] - e[5] * e[2] * e[15] + e[5] * e[3] * e[14] + e[13] * e[2] * e[7] - e[13] * e[3] * e[6]\n            ),\n            invDet * (\n                -e[1] * e[6] * e[11] + e[1] * e[7] * e[10] + e[5] * e[2] * e[11] - e[5] * e[3] * e[10] - e[9] * e[2] * e[7] + e[9] * e[3] * e[6]\n            ),\n            invDet * (\n                -e[4] * e[10] * e[15] + e[4] * e[11] * e[14] + e[8] * e[6] * e[15] - e[8] * e[7] * e[14] - e[12] * e[6] * e[11] + e[12] * e[7] * e[10]\n            ),\n            invDet * (\n                e[0] * e[10] * e[15] - e[0] * e[11] * e[14] - e[8] * e[2] * e[15] + e[8] * e[3] * e[14] + e[12] * e[2] * e[11] - e[12] * e[3] * e[10]\n            ),\n            invDet * (\n                -e[0] * e[6] * e[15] + e[0] * e[7] * e[14] + e[4] * e[2] * e[15] - e[4] * e[3] * e[14] - e[12] * e[2] * e[7] + e[12] * e[3] * e[6]\n            ),\n            invDet * (\n                e[0] * e[6] * e[11] - e[0] * e[7] * e[10] - e[4] * e[2] * e[11] + e[4] * e[3] * e[10] + e[8] * e[2] * e[7] - e[8] * e[3] * e[6]\n            ),\n            invDet * (\n                e[4] * e[9] * e[15] - e[4] * e[11] * e[13] - e[8] * e[5] * e[15] + e[8] * e[7] * e[13] + e[12] * e[5] * e[11] - e[12] * e[7] * e[9]\n            ),\n            invDet * (\n                -e[0] * e[9] * e[15] + e[0] * e[11] * e[13] + e[8] * e[1] * e[15] - e[8] * e[3] * e[13] - e[12] * e[1] * e[11] + e[12] * e[3] * e[9]\n            ),\n            invDet * (\n                e[0] * e[5] * e[15] - e[0] * e[7] * e[13] - e[4] * e[1] * e[15] + e[4] * e[3] * e[13] + e[12] * e[1] * e[7] - e[12] * e[3] * e[5]\n            ),\n            invDet * (\n                -e[0] * e[5] * e[11] + e[0] * e[7] * e[9] + e[4] * e[1] * e[11] - e[4] * e[3] * e[9] - e[8] * e[1] * e[7] + e[8] * e[3] * e[5]\n            ),\n            invDet * (\n                -e[4] * e[9] * e[14] + e[4] * e[10] * e[13] + e[8] * e[5] * e[14] - e[8] * e[6] * e[13] - e[12] * e[5] * e[10] + e[12] * e[6] * e[9]\n            ),\n            invDet * (\n                e[0] * e[9] * e[14] - e[0] * e[10] * e[13] - e[8] * e[1] * e[14] + e[8] * e[2] * e[13] + e[12] * e[1] * e[10] - e[12] * e[2] * e[9]\n            ),\n            invDet * (\n                -e[0] * e[5] * e[14] + e[0] * e[6] * e[13] + e[4] * e[1] * e[14] - e[4] * e[2] * e[13] - e[12] * e[1] * e[6] + e[12] * e[2] * e[5]\n            ),\n            invDet * (\n                e[0] * e[5] * e[10] - e[0] * e[6] * e[9] - e[4] * e[1] * e[10] + e[4] * e[2] * e[9] + e[8] * e[1] * e[6] - e[8] * e[2] * e[5]\n            ),\n        );\n    }\n\n    static Compose(position: Vector3, rotation: Quaternion, scale: Vector3): Matrix4 {\n        const x = rotation.x,\n            y = rotation.y,\n            z = rotation.z,\n            w = rotation.w;\n        const x2 = x + x,\n            y2 = y + y,\n            z2 = z + z;\n        const xx = x * x2,\n            xy = x * y2,\n            xz = x * z2;\n        const yy = y * y2,\n            yz = y * z2,\n            zz = z * z2;\n        const wx = w * x2,\n            wy = w * y2,\n            wz = w * z2;\n        const sx = scale.x,\n            sy = scale.y,\n            sz = scale.z;\n        // prettier-ignore\n        return new Matrix4(\n            (1 - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n            (xy - wz) * sy, (1 - (xx + zz)) * sy, (yz + wx) * sy, 0,\n            (xz + wy) * sz, (yz - wx) * sz, (1 - (xx + yy)) * sz, 0,\n            position.x, position.y, position.z, 1\n        );\n    }\n\n    toString(): string {\n        return `[${this.buffer.join(\", \")}]`;\n    }\n}\n\nexport { Matrix4 };\n","import { Object3D } from \"../core/Object3D\";\n\nclass ObjectAddedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectAdded\");\n    }\n}\n\nclass ObjectRemovedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectRemoved\");\n    }\n}\n\nclass ObjectChangedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectChanged\");\n    }\n}\n\nexport { ObjectAddedEvent, ObjectRemovedEvent, ObjectChangedEvent };\n","import { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { EventDispatcher } from \"../events/EventDispatcher\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { ObjectChangedEvent } from \"../events/Events\";\n\nabstract class Object3D extends EventDispatcher {\n    public positionChanged: boolean = false;\n    public rotationChanged: boolean = false;\n    public scaleChanged: boolean = false;\n\n    protected _position: Vector3 = new Vector3();\n    protected _rotation: Quaternion = new Quaternion();\n    protected _scale: Vector3 = new Vector3(1, 1, 1);\n    protected _transform: Matrix4 = new Matrix4();\n\n    protected _changeEvent = new ObjectChangedEvent(this);\n\n    update: () => void;\n    applyPosition: () => void;\n    applyRotation: () => void;\n    applyScale: () => void;\n    raiseChangeEvent: () => void;\n\n    constructor() {\n        super();\n\n        this.update = () => {};\n\n        this.applyPosition = () => {\n            this.position = new Vector3();\n        };\n\n        this.applyRotation = () => {\n            this.rotation = new Quaternion();\n        };\n\n        this.applyScale = () => {\n            this.scale = new Vector3(1, 1, 1);\n        };\n\n        this.raiseChangeEvent = () => {\n            this.dispatchEvent(this._changeEvent);\n        };\n    }\n\n    protected _updateMatrix() {\n        this._transform = Matrix4.Compose(this._position, this._rotation, this._scale);\n    }\n\n    get position() {\n        return this._position;\n    }\n\n    set position(position: Vector3) {\n        if (!this._position.equals(position)) {\n            this._position = position;\n            this.positionChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(rotation: Quaternion) {\n        if (!this._rotation.equals(rotation)) {\n            this._rotation = rotation;\n            this.rotationChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    set scale(scale: Vector3) {\n        if (!this._scale.equals(scale)) {\n            this._scale = scale;\n            this.scaleChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get forward() {\n        let forward = new Vector3(0, 0, 1);\n        forward = this.rotation.apply(forward);\n        return forward;\n    }\n\n    get transform() {\n        return this._transform;\n    }\n}\n\nexport { Object3D };\n","import { Quaternion } from \"./Quaternion\";\nimport type { Vector3 } from \"./Vector3\";\n\nclass Matrix3 {\n    public readonly buffer: number[];\n\n    // prettier-ignore\n    constructor(n11: number = 1, n12: number = 0, n13: number = 0,\n                n21: number = 0, n22: number = 1, n23: number = 0,\n                n31: number = 0, n32: number = 0, n33: number = 1) {\n        this.buffer = [\n            n11, n12, n13,\n            n21, n22, n23,\n            n31, n32, n33\n        ];\n    }\n\n    equals(m: Matrix3): boolean {\n        if (this.buffer.length !== m.buffer.length) {\n            return false;\n        }\n        if (this.buffer === m.buffer) {\n            return true;\n        }\n        for (let i = 0; i < this.buffer.length; i++) {\n            if (this.buffer[i] !== m.buffer[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    multiply(v: Matrix3): Matrix3 {\n        const a = this.buffer;\n        const b = v.buffer;\n        return new Matrix3(\n            b[0] * a[0] + b[3] * a[1] + b[6] * a[2],\n            b[1] * a[0] + b[4] * a[1] + b[7] * a[2],\n            b[2] * a[0] + b[5] * a[1] + b[8] * a[2],\n            b[0] * a[3] + b[3] * a[4] + b[6] * a[5],\n            b[1] * a[3] + b[4] * a[4] + b[7] * a[5],\n            b[2] * a[3] + b[5] * a[4] + b[8] * a[5],\n            b[0] * a[6] + b[3] * a[7] + b[6] * a[8],\n            b[1] * a[6] + b[4] * a[7] + b[7] * a[8],\n            b[2] * a[6] + b[5] * a[7] + b[8] * a[8],\n        );\n    }\n\n    clone(): Matrix3 {\n        const e = this.buffer;\n        // prettier-ignore\n        return new Matrix3(\n            e[0], e[1], e[2],\n            e[3], e[4], e[5],\n            e[6], e[7], e[8]\n        );\n    }\n\n    static Eye(v: number = 1): Matrix3 {\n        return new Matrix3(v, 0, 0, 0, v, 0, 0, 0, v);\n    }\n\n    static Diagonal(v: Vector3): Matrix3 {\n        return new Matrix3(v.x, 0, 0, 0, v.y, 0, 0, 0, v.z);\n    }\n\n    static RotationFromQuaternion(q: Quaternion): Matrix3 {\n        const matrix = new Matrix3(\n            1 - 2 * q.y * q.y - 2 * q.z * q.z,\n            2 * q.x * q.y - 2 * q.z * q.w,\n            2 * q.x * q.z + 2 * q.y * q.w,\n            2 * q.x * q.y + 2 * q.z * q.w,\n            1 - 2 * q.x * q.x - 2 * q.z * q.z,\n            2 * q.y * q.z - 2 * q.x * q.w,\n            2 * q.x * q.z - 2 * q.y * q.w,\n            2 * q.y * q.z + 2 * q.x * q.w,\n            1 - 2 * q.x * q.x - 2 * q.y * q.y,\n        );\n        return matrix;\n    }\n\n    static RotationFromEuler(m: Vector3): Matrix3 {\n        const cx = Math.cos(m.x);\n        const sx = Math.sin(m.x);\n        const cy = Math.cos(m.y);\n        const sy = Math.sin(m.y);\n        const cz = Math.cos(m.z);\n        const sz = Math.sin(m.z);\n\n        const rotationMatrix = [\n            cy * cz + sy * sx * sz,\n            -cy * sz + sy * sx * cz,\n            sy * cx,\n            cx * sz,\n            cx * cz,\n            -sx,\n            -sy * cz + cy * sx * sz,\n            sy * sz + cy * sx * cz,\n            cy * cx,\n        ];\n\n        return new Matrix3(...rotationMatrix);\n    }\n\n    toString(): string {\n        return `[${this.buffer.join(\", \")}]`;\n    }\n}\n\nexport { Matrix3 };\n","import { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\n\nclass SplatData {\n    static RowLength = 3 * 4 + 3 * 4 + 4 + 4;\n\n    public changed = false;\n    public detached = false;\n\n    private _vertexCount: number;\n    private _positions: Float32Array;\n    private _rotations: Float32Array;\n    private _scales: Float32Array;\n    private _colors: Uint8Array;\n    private _selection: Uint8Array;\n\n    translate: (translation: Vector3) => void;\n    rotate: (rotation: Quaternion) => void;\n    scale: (scale: Vector3) => void;\n    serialize: () => Uint8Array;\n    reattach: (\n        positions: ArrayBufferLike,\n        rotations: ArrayBufferLike,\n        scales: ArrayBufferLike,\n        colors: ArrayBufferLike,\n        selection: ArrayBufferLike,\n    ) => void;\n\n    constructor(\n        vertexCount: number = 0,\n        positions: Float32Array | null = null,\n        rotations: Float32Array | null = null,\n        scales: Float32Array | null = null,\n        colors: Uint8Array | null = null,\n    ) {\n        this._vertexCount = vertexCount;\n        this._positions = positions || new Float32Array(0);\n        this._rotations = rotations || new Float32Array(0);\n        this._scales = scales || new Float32Array(0);\n        this._colors = colors || new Uint8Array(0);\n        this._selection = new Uint8Array(this.vertexCount);\n\n        this.translate = (translation: Vector3) => {\n            for (let i = 0; i < this.vertexCount; i++) {\n                this.positions[3 * i + 0] += translation.x;\n                this.positions[3 * i + 1] += translation.y;\n                this.positions[3 * i + 2] += translation.z;\n            }\n\n            this.changed = true;\n        };\n\n        this.rotate = (rotation: Quaternion) => {\n            const R = Matrix3.RotationFromQuaternion(rotation).buffer;\n            for (let i = 0; i < this.vertexCount; i++) {\n                const x = this.positions[3 * i + 0];\n                const y = this.positions[3 * i + 1];\n                const z = this.positions[3 * i + 2];\n\n                this.positions[3 * i + 0] = R[0] * x + R[1] * y + R[2] * z;\n                this.positions[3 * i + 1] = R[3] * x + R[4] * y + R[5] * z;\n                this.positions[3 * i + 2] = R[6] * x + R[7] * y + R[8] * z;\n\n                const currentRotation = new Quaternion(\n                    this.rotations[4 * i + 1],\n                    this.rotations[4 * i + 2],\n                    this.rotations[4 * i + 3],\n                    this.rotations[4 * i + 0],\n                );\n\n                const newRot = rotation.multiply(currentRotation);\n                this.rotations[4 * i + 1] = newRot.x;\n                this.rotations[4 * i + 2] = newRot.y;\n                this.rotations[4 * i + 3] = newRot.z;\n                this.rotations[4 * i + 0] = newRot.w;\n            }\n\n            this.changed = true;\n        };\n\n        this.scale = (scale: Vector3) => {\n            for (let i = 0; i < this.vertexCount; i++) {\n                this.positions[3 * i + 0] *= scale.x;\n                this.positions[3 * i + 1] *= scale.y;\n                this.positions[3 * i + 2] *= scale.z;\n\n                this.scales[3 * i + 0] *= scale.x;\n                this.scales[3 * i + 1] *= scale.y;\n                this.scales[3 * i + 2] *= scale.z;\n            }\n\n            this.changed = true;\n        };\n\n        this.serialize = () => {\n            const data = new Uint8Array(this.vertexCount * SplatData.RowLength);\n\n            const f_buffer = new Float32Array(data.buffer);\n            const u_buffer = new Uint8Array(data.buffer);\n\n            for (let i = 0; i < this.vertexCount; i++) {\n                f_buffer[8 * i + 0] = this.positions[3 * i + 0];\n                f_buffer[8 * i + 1] = this.positions[3 * i + 1];\n                f_buffer[8 * i + 2] = this.positions[3 * i + 2];\n\n                u_buffer[32 * i + 24 + 0] = this.colors[4 * i + 0];\n                u_buffer[32 * i + 24 + 1] = this.colors[4 * i + 1];\n                u_buffer[32 * i + 24 + 2] = this.colors[4 * i + 2];\n                u_buffer[32 * i + 24 + 3] = this.colors[4 * i + 3];\n\n                f_buffer[8 * i + 3 + 0] = this.scales[3 * i + 0];\n                f_buffer[8 * i + 3 + 1] = this.scales[3 * i + 1];\n                f_buffer[8 * i + 3 + 2] = this.scales[3 * i + 2];\n\n                u_buffer[32 * i + 28 + 0] = (this.rotations[4 * i + 0] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 1] = (this.rotations[4 * i + 1] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 2] = (this.rotations[4 * i + 2] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 3] = (this.rotations[4 * i + 3] * 128 + 128) & 0xff;\n            }\n\n            return data;\n        };\n\n        this.reattach = (\n            positions: ArrayBufferLike,\n            rotations: ArrayBufferLike,\n            scales: ArrayBufferLike,\n            colors: ArrayBufferLike,\n            selection: ArrayBufferLike,\n        ) => {\n            console.assert(\n                positions.byteLength === this.vertexCount * 3 * 4,\n                `Expected ${this.vertexCount * 3 * 4} bytes, got ${positions.byteLength} bytes`,\n            );\n            this._positions = new Float32Array(positions);\n            this._rotations = new Float32Array(rotations);\n            this._scales = new Float32Array(scales);\n            this._colors = new Uint8Array(colors);\n            this._selection = new Uint8Array(selection);\n            this.detached = false;\n        };\n    }\n\n    static Deserialize(data: Uint8Array): SplatData {\n        const vertexCount = data.length / SplatData.RowLength;\n        const positions = new Float32Array(3 * vertexCount);\n        const rotations = new Float32Array(4 * vertexCount);\n        const scales = new Float32Array(3 * vertexCount);\n        const colors = new Uint8Array(4 * vertexCount);\n\n        const f_buffer = new Float32Array(data.buffer);\n        const u_buffer = new Uint8Array(data.buffer);\n\n        for (let i = 0; i < vertexCount; i++) {\n            positions[3 * i + 0] = f_buffer[8 * i + 0];\n            positions[3 * i + 1] = f_buffer[8 * i + 1];\n            positions[3 * i + 2] = f_buffer[8 * i + 2];\n\n            rotations[4 * i + 0] = (u_buffer[32 * i + 28 + 0] - 128) / 128;\n            rotations[4 * i + 1] = (u_buffer[32 * i + 28 + 1] - 128) / 128;\n            rotations[4 * i + 2] = (u_buffer[32 * i + 28 + 2] - 128) / 128;\n            rotations[4 * i + 3] = (u_buffer[32 * i + 28 + 3] - 128) / 128;\n\n            scales[3 * i + 0] = f_buffer[8 * i + 3 + 0];\n            scales[3 * i + 1] = f_buffer[8 * i + 3 + 1];\n            scales[3 * i + 2] = f_buffer[8 * i + 3 + 2];\n\n            colors[4 * i + 0] = u_buffer[32 * i + 24 + 0];\n            colors[4 * i + 1] = u_buffer[32 * i + 24 + 1];\n            colors[4 * i + 2] = u_buffer[32 * i + 24 + 2];\n            colors[4 * i + 3] = u_buffer[32 * i + 24 + 3];\n        }\n\n        return new SplatData(vertexCount, positions, rotations, scales, colors);\n    }\n\n    get vertexCount() {\n        return this._vertexCount;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n\n    get rotations() {\n        return this._rotations;\n    }\n\n    get scales() {\n        return this._scales;\n    }\n\n    get colors() {\n        return this._colors;\n    }\n\n    get selection() {\n        return this._selection;\n    }\n\n    clone() {\n        return new SplatData(\n            this.vertexCount,\n            new Float32Array(this.positions),\n            new Float32Array(this.rotations),\n            new Float32Array(this.scales),\n            new Uint8Array(this.colors),\n        );\n    }\n}\n\nexport { SplatData };\n","class SplatvData {\n    static RowLength = 64;\n\n    private _vertexCount: number;\n    private _positions: Float32Array;\n    private _data: Uint32Array;\n    private _width: number;\n    private _height: number;\n\n    serialize: () => Uint8Array;\n\n    constructor(vertexCount: number, positions: Float32Array, data: Uint32Array, width: number, height: number) {\n        this._vertexCount = vertexCount;\n        this._positions = positions;\n        this._data = data;\n        this._width = width;\n        this._height = height;\n\n        this.serialize = () => {\n            return new Uint8Array(this._data.buffer);\n        };\n    }\n\n    static Deserialize(data: Uint8Array, width: number, height: number): SplatvData {\n        const buffer = new Uint32Array(data.buffer);\n        const f_buffer = new Float32Array(data.buffer);\n        const vertexCount = Math.floor(f_buffer.byteLength / this.RowLength);\n        const positions = new Float32Array(vertexCount * 3);\n        for (let i = 0; i < vertexCount; i++) {\n            positions[3 * i + 0] = f_buffer[16 * i + 0];\n            positions[3 * i + 1] = f_buffer[16 * i + 1];\n            positions[3 * i + 2] = f_buffer[16 * i + 2];\n            positions[3 * i + 0] = f_buffer[16 * i + 3];\n        }\n        return new SplatvData(vertexCount, positions, buffer, width, height);\n    }\n\n    get vertexCount() {\n        return this._vertexCount;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n}\n\nexport { SplatvData };\n","import { Quaternion } from \"../math/Quaternion\";\n\nclass Converter {\n    public static SH_C0 = 0.28209479177387814;\n\n    public static SplatToPLY(buffer: ArrayBuffer, vertexCount: number): ArrayBuffer {\n        let header = \"ply\\nformat binary_little_endian 1.0\\n\";\n        header += `element vertex ${vertexCount}\\n`;\n\n        const properties = [\"x\", \"y\", \"z\", \"nx\", \"ny\", \"nz\", \"f_dc_0\", \"f_dc_1\", \"f_dc_2\"];\n        for (let i = 0; i < 45; i++) {\n            properties.push(`f_rest_${i}`);\n        }\n        properties.push(\"opacity\");\n        properties.push(\"scale_0\");\n        properties.push(\"scale_1\");\n        properties.push(\"scale_2\");\n        properties.push(\"rot_0\");\n        properties.push(\"rot_1\");\n        properties.push(\"rot_2\");\n        properties.push(\"rot_3\");\n\n        for (const property of properties) {\n            header += `property float ${property}\\n`;\n        }\n        header += \"end_header\\n\";\n\n        const headerBuffer = new TextEncoder().encode(header);\n\n        const plyRowLength = 4 * 3 + 4 * 3 + 4 * 3 + 4 * 45 + 4 + 4 * 3 + 4 * 4;\n        const plyLength = vertexCount * plyRowLength;\n        const output = new DataView(new ArrayBuffer(headerBuffer.length + plyLength));\n        new Uint8Array(output.buffer).set(headerBuffer, 0);\n\n        const f_buffer = new Float32Array(buffer);\n        const u_buffer = new Uint8Array(buffer);\n\n        const offset = headerBuffer.length;\n        const f_dc_offset = 4 * 3 + 4 * 3;\n        const opacity_offset = f_dc_offset + 4 * 3 + 4 * 45;\n        const scale_offset = opacity_offset + 4;\n        const rot_offset = scale_offset + 4 * 3;\n        for (let i = 0; i < vertexCount; i++) {\n            const pos0 = f_buffer[8 * i + 0];\n            const pos1 = f_buffer[8 * i + 1];\n            const pos2 = f_buffer[8 * i + 2];\n\n            const f_dc_0 = (u_buffer[32 * i + 24 + 0] / 255 - 0.5) / this.SH_C0;\n            const f_dc_1 = (u_buffer[32 * i + 24 + 1] / 255 - 0.5) / this.SH_C0;\n            const f_dc_2 = (u_buffer[32 * i + 24 + 2] / 255 - 0.5) / this.SH_C0;\n\n            const alpha = u_buffer[32 * i + 24 + 3] / 255;\n            const opacity = Math.log(alpha / (1 - alpha));\n\n            const scale0 = Math.log(f_buffer[8 * i + 3 + 0]);\n            const scale1 = Math.log(f_buffer[8 * i + 3 + 1]);\n            const scale2 = Math.log(f_buffer[8 * i + 3 + 2]);\n\n            let q = new Quaternion(\n                (u_buffer[32 * i + 28 + 1] - 128) / 128,\n                (u_buffer[32 * i + 28 + 2] - 128) / 128,\n                (u_buffer[32 * i + 28 + 3] - 128) / 128,\n                (u_buffer[32 * i + 28 + 0] - 128) / 128,\n            );\n            q = q.normalize();\n\n            const rot0 = q.w;\n            const rot1 = q.x;\n            const rot2 = q.y;\n            const rot3 = q.z;\n\n            output.setFloat32(offset + plyRowLength * i + 0, pos0, true);\n            output.setFloat32(offset + plyRowLength * i + 4, pos1, true);\n            output.setFloat32(offset + plyRowLength * i + 8, pos2, true);\n\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 0, f_dc_0, true);\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 4, f_dc_1, true);\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 8, f_dc_2, true);\n\n            output.setFloat32(offset + plyRowLength * i + opacity_offset, opacity, true);\n\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 0, scale0, true);\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 4, scale1, true);\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 8, scale2, true);\n\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 0, rot0, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 4, rot1, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 8, rot2, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 12, rot3, true);\n        }\n\n        return output.buffer;\n    }\n}\n\nexport { Converter };\n","import { Vector3 } from \"./Vector3\";\n\nclass Box3 {\n    constructor(\n        public min: Vector3,\n        public max: Vector3,\n    ) {}\n\n    public contains(point: Vector3) {\n        return (\n            point.x >= this.min.x &&\n            point.x <= this.max.x &&\n            point.y >= this.min.y &&\n            point.y <= this.max.y &&\n            point.z >= this.min.z &&\n            point.z <= this.max.z\n        );\n    }\n\n    public intersects(box: Box3) {\n        return (\n            this.max.x >= box.min.x &&\n            this.min.x <= box.max.x &&\n            this.max.y >= box.min.y &&\n            this.min.y <= box.max.y &&\n            this.max.z >= box.min.z &&\n            this.min.z <= box.max.z\n        );\n    }\n\n    public size() {\n        return this.max.subtract(this.min);\n    }\n\n    public center() {\n        return this.min.add(this.max).divide(2);\n    }\n\n    public expand(point: Vector3) {\n        this.min = this.min.min(point);\n        this.max = this.max.max(point);\n    }\n\n    public permute() {\n        const min = this.min;\n        const max = this.max;\n        this.min = new Vector3(Math.min(min.x, max.x), Math.min(min.y, max.y), Math.min(min.z, max.z));\n        this.max = new Vector3(Math.max(min.x, max.x), Math.max(min.y, max.y), Math.max(min.z, max.z));\n    }\n}\n\nexport { Box3 };\n","import { SplatData } from \"./SplatData\";\nimport { Object3D } from \"../core/Object3D\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Converter } from \"../utils/Converter\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Box3 } from \"../math/Box3\";\n\nclass Splat extends Object3D {\n    public selectedChanged: boolean = false;\n    public colorTransformChanged: boolean = false;\n\n    private _data: SplatData;\n    private _selected: boolean = false;\n    private _colorTransforms: Array<Matrix4> = [];\n    private _colorTransformsMap: Map<number, number> = new Map();\n    private _bounds: Box3;\n\n    recalculateBounds: () => void;\n\n    constructor(splat: SplatData | undefined = undefined) {\n        super();\n\n        this._data = splat || new SplatData();\n        this._bounds = new Box3(\n            new Vector3(Infinity, Infinity, Infinity),\n            new Vector3(-Infinity, -Infinity, -Infinity),\n        );\n\n        this.recalculateBounds = () => {\n            this._bounds = new Box3(\n                new Vector3(Infinity, Infinity, Infinity),\n                new Vector3(-Infinity, -Infinity, -Infinity),\n            );\n            for (let i = 0; i < this._data.vertexCount; i++) {\n                this._bounds.expand(\n                    new Vector3(\n                        this._data.positions[3 * i],\n                        this._data.positions[3 * i + 1],\n                        this._data.positions[3 * i + 2],\n                    ),\n                );\n            }\n        };\n\n        this.applyPosition = () => {\n            this.data.translate(this.position);\n            this.position = new Vector3();\n        };\n\n        this.applyRotation = () => {\n            this.data.rotate(this.rotation);\n            this.rotation = new Quaternion();\n        };\n\n        this.applyScale = () => {\n            this.data.scale(this.scale);\n            this.scale = new Vector3(1, 1, 1);\n        };\n\n        this.recalculateBounds();\n    }\n\n    saveToFile(name: string | null = null, format: \"splat\" | \"ply\" = \"splat\") {\n        if (!document) return;\n\n        if (!name) {\n            const now = new Date();\n            name = `splat-${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}.${format}`;\n        }\n\n        const splatClone = this.clone();\n\n        splatClone.applyRotation();\n        splatClone.applyScale();\n        splatClone.applyPosition();\n\n        const data = splatClone.data.serialize();\n        let blob;\n        if (format === \"ply\") {\n            const plyData = Converter.SplatToPLY(data.buffer as ArrayBuffer, splatClone.data.vertexCount);\n            blob = new Blob([plyData], { type: \"application/octet-stream\" });\n        } else {\n            blob = new Blob([data.buffer as ArrayBuffer], { type: \"application/octet-stream\" });\n        }\n\n        const link = document.createElement(\"a\");\n        link.download = name;\n        link.href = URL.createObjectURL(blob);\n        link.click();\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get selected() {\n        return this._selected;\n    }\n\n    set selected(selected: boolean) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.selectedChanged = true;\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get colorTransforms() {\n        return this._colorTransforms;\n    }\n\n    get colorTransformsMap() {\n        return this._colorTransformsMap;\n    }\n\n    get bounds() {\n        let center = this._bounds.center();\n        center = center.add(this.position);\n\n        let size = this._bounds.size();\n        size = size.multiply(this.scale);\n\n        return new Box3(center.subtract(size.divide(2)), center.add(size.divide(2)));\n    }\n\n    clone() {\n        const splat = new Splat(this.data.clone());\n        splat.position = this.position.clone();\n        splat.rotation = this.rotation.clone();\n        splat.scale = this.scale.clone();\n        return splat;\n    }\n}\n\nexport { Splat };\n","import { Object3D } from \"../core/Object3D\";\nimport { SplatvData } from \"./SplatvData\";\n\nclass Splatv extends Object3D {\n    private _data: SplatvData;\n\n    constructor(splat: SplatvData) {\n        super();\n\n        this._data = splat;\n    }\n\n    get data() {\n        return this._data;\n    }\n}\n\nexport { Splatv };\n","import { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass CameraData {\n    private _fx: number = 1132;\n    private _fy: number = 1132;\n    private _near: number = 0.1;\n    private _far: number = 100;\n\n    private _width: number = 512;\n    private _height: number = 512;\n\n    private _projectionMatrix: Matrix4 = new Matrix4();\n    private _viewMatrix: Matrix4 = new Matrix4();\n    private _viewProj: Matrix4 = new Matrix4();\n\n    update: (position: Vector3, rotation: Quaternion) => void;\n    setSize: (width: number, height: number) => void;\n\n    private _updateProjectionMatrix: () => void;\n\n    constructor() {\n        this._updateProjectionMatrix = () => {\n            // prettier-ignore\n            this._projectionMatrix = new Matrix4(\n                2 * this.fx / this.width, 0, 0, 0,\n                0, -2 * this.fy / this.height, 0, 0,\n                0, 0, this.far / (this.far - this.near), 1,\n                0, 0, -(this.far * this.near) / (this.far - this.near), 0\n            );\n\n            this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);\n        };\n\n        this.update = (position: Vector3, rotation: Quaternion) => {\n            const R = Matrix3.RotationFromQuaternion(rotation).buffer;\n            const t = position.flat();\n\n            // prettier-ignore\n            this._viewMatrix = new Matrix4(\n                R[0], R[1], R[2], 0,\n                R[3], R[4], R[5], 0,\n                R[6], R[7], R[8], 0,\n                -t[0] * R[0] - t[1] * R[3] - t[2] * R[6],\n                -t[0] * R[1] - t[1] * R[4] - t[2] * R[7],\n                -t[0] * R[2] - t[1] * R[5] - t[2] * R[8],\n                1,\n            );\n\n            this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);\n        };\n\n        this.setSize = (width: number, height: number) => {\n            this._width = width;\n            this._height = height;\n            this._updateProjectionMatrix();\n        };\n    }\n\n    get fx() {\n        return this._fx;\n    }\n\n    set fx(fx: number) {\n        if (this._fx !== fx) {\n            this._fx = fx;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get fy() {\n        return this._fy;\n    }\n\n    set fy(fy: number) {\n        if (this._fy !== fy) {\n            this._fy = fy;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get near() {\n        return this._near;\n    }\n\n    set near(near: number) {\n        if (this._near !== near) {\n            this._near = near;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get far() {\n        return this._far;\n    }\n\n    set far(far: number) {\n        if (this._far !== far) {\n            this._far = far;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get projectionMatrix() {\n        return this._projectionMatrix;\n    }\n\n    get viewMatrix() {\n        return this._viewMatrix;\n    }\n\n    get viewProj() {\n        return this._viewProj;\n    }\n}\n\nexport { CameraData };\n","import { Matrix4 } from \"./Matrix4\";\n\nclass Vector4 {\n    public readonly x: number;\n    public readonly y: number;\n    public readonly z: number;\n    public readonly w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    equals(v: Vector4): boolean {\n        if (this.x !== v.x) {\n            return false;\n        }\n        if (this.y !== v.y) {\n            return false;\n        }\n        if (this.z !== v.z) {\n            return false;\n        }\n        if (this.w !== v.w) {\n            return false;\n        }\n\n        return true;\n    }\n\n    add(v: number): Vector4;\n    add(v: Vector4): Vector4;\n    add(v: number | Vector4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x + v, this.y + v, this.z + v, this.w + v);\n        } else {\n            return new Vector4(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n        }\n    }\n\n    subtract(v: number): Vector4;\n    subtract(v: Vector4): Vector4;\n    subtract(v: number | Vector4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x - v, this.y - v, this.z - v, this.w - v);\n        } else {\n            return new Vector4(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n        }\n    }\n\n    multiply(v: number): Vector4;\n    multiply(v: Vector4): Vector4;\n    multiply(v: Matrix4): Vector4;\n    multiply(v: number | Vector4 | Matrix4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x * v, this.y * v, this.z * v, this.w * v);\n        } else if (v instanceof Vector4) {\n            return new Vector4(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w);\n        } else {\n            return new Vector4(\n                this.x * v.buffer[0] + this.y * v.buffer[4] + this.z * v.buffer[8] + this.w * v.buffer[12],\n                this.x * v.buffer[1] + this.y * v.buffer[5] + this.z * v.buffer[9] + this.w * v.buffer[13],\n                this.x * v.buffer[2] + this.y * v.buffer[6] + this.z * v.buffer[10] + this.w * v.buffer[14],\n                this.x * v.buffer[3] + this.y * v.buffer[7] + this.z * v.buffer[11] + this.w * v.buffer[15],\n            );\n        }\n    }\n\n    dot(v: Vector4): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    }\n\n    lerp(v: Vector4, t: number): Vector4 {\n        return new Vector4(\n            this.x + (v.x - this.x) * t,\n            this.y + (v.y - this.y) * t,\n            this.z + (v.z - this.z) * t,\n            this.w + (v.w - this.w) * t,\n        );\n    }\n\n    magnitude(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    }\n\n    distanceTo(v: Vector4): number {\n        return Math.sqrt((this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2 + (this.w - v.w) ** 2);\n    }\n\n    normalize(): Vector4 {\n        const length = this.magnitude();\n\n        return new Vector4(this.x / length, this.y / length, this.z / length, this.w / length);\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z, this.w];\n    }\n\n    clone(): Vector4 {\n        return new Vector4(this.x, this.y, this.z, this.w);\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Vector4 };\n","import { CameraData } from \"./CameraData\";\nimport { Object3D } from \"../core/Object3D\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\n\nclass Camera extends Object3D {\n    private _data: CameraData;\n\n    screenPointToRay: (x: number, y: number) => Vector3;\n\n    constructor(camera: CameraData | undefined = undefined) {\n        super();\n\n        this._data = camera ? camera : new CameraData();\n        this._position = new Vector3(0, 0, -5);\n\n        this.update = () => {\n            this.data.update(this.position, this.rotation);\n        };\n\n        this.screenPointToRay = (x: number, y: number) => {\n            const clipSpaceCoords = new Vector4(x, y, -1, 1);\n            const inverseProjectionMatrix = this._data.projectionMatrix.invert();\n            const cameraSpaceCoords = clipSpaceCoords.multiply(inverseProjectionMatrix);\n            const inverseViewMatrix = this._data.viewMatrix.invert();\n            const worldSpaceCoords = cameraSpaceCoords.multiply(inverseViewMatrix);\n            const worldSpacePosition = new Vector3(\n                worldSpaceCoords.x / worldSpaceCoords.w,\n                worldSpaceCoords.y / worldSpaceCoords.w,\n                worldSpaceCoords.z / worldSpaceCoords.w,\n            );\n            const direction = worldSpacePosition.subtract(this.position).normalize();\n            return direction;\n        };\n    }\n\n    get data() {\n        return this._data;\n    }\n}\n\nexport { Camera };\n","import { Object3D } from \"./Object3D\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { Splat } from \"../splats/Splat\";\nimport { EventDispatcher } from \"../events/EventDispatcher\";\nimport { ObjectAddedEvent, ObjectRemovedEvent } from \"../events/Events\";\nimport { Converter } from \"../utils/Converter\";\n\nclass Scene extends EventDispatcher {\n    private _objects: Object3D[] = [];\n\n    addObject: (object: Object3D) => void;\n    removeObject: (object: Object3D) => void;\n    findObject: (predicate: (object: Object3D) => boolean) => Object3D | undefined;\n    findObjectOfType: <T extends Object3D>(type: { new (): T }) => T | undefined;\n    reset: () => void;\n\n    constructor() {\n        super();\n\n        this.addObject = (object: Object3D) => {\n            this.objects.push(object);\n            this.dispatchEvent(new ObjectAddedEvent(object));\n        };\n\n        this.removeObject = (object: Object3D) => {\n            const index = this.objects.indexOf(object);\n            if (index < 0) {\n                throw new Error(\"Object not found in scene\");\n            }\n            this.objects.splice(index, 1);\n            this.dispatchEvent(new ObjectRemovedEvent(object));\n        };\n\n        this.findObject = (predicate: (object: Object3D) => boolean) => {\n            for (const object of this.objects) {\n                if (predicate(object)) {\n                    return object;\n                }\n            }\n            return undefined;\n        };\n\n        this.findObjectOfType = <T extends Object3D>(type: { new (): T }) => {\n            for (const object of this.objects) {\n                if (object instanceof type) {\n                    return object;\n                }\n            }\n            return undefined;\n        };\n\n        this.reset = () => {\n            const objectsToRemove = this.objects.slice();\n            for (const object of objectsToRemove) {\n                this.removeObject(object);\n            }\n        };\n\n        this.reset();\n    }\n\n    getMergedSceneDataBuffer(format: \"splat\" | \"ply\" = \"splat\"): ArrayBuffer {\n        const buffers: Uint8Array[] = [];\n        let vertexCount = 0;\n\n        for (const object of this.objects) {\n            if (object instanceof Splat) {\n                const splatClone = object.clone() as Splat;\n\n                splatClone.applyRotation();\n                splatClone.applyScale();\n                splatClone.applyPosition();\n                const buffer = splatClone.data.serialize();\n\n                buffers.push(buffer);\n                vertexCount += splatClone.data.vertexCount;\n            }\n        }\n\n        const mergedSplatData = new Uint8Array(vertexCount * SplatData.RowLength);\n        let offset = 0;\n        for (const buffer of buffers) {\n            mergedSplatData.set(buffer, offset);\n            offset += buffer.length;\n        }\n\n        if (format === \"ply\") {\n            return Converter.SplatToPLY(mergedSplatData.buffer, vertexCount);\n        }\n\n        return mergedSplatData.buffer;\n    }\n\n    saveToFile(name: string | null = null, format: \"splat\" | \"ply\" = \"splat\") {\n        if (!document) return;\n\n        if (!name) {\n            const now = new Date();\n            name = `scene-${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}.${format}`;\n        }\n\n        const mergedData = this.getMergedSceneDataBuffer(format);\n\n        const blob = new Blob([mergedData], { type: \"application/octet-stream\" });\n\n        const link = document.createElement(\"a\");\n        link.download = name;\n        link.href = URL.createObjectURL(blob);\n        link.click();\n    }\n\n    get objects() {\n        return this._objects;\n    }\n}\n\nexport { Scene };\n","export async function initiateFetchRequest(url: string, useCache: boolean): Promise<Response> {\n    const req = await fetch(url, {\n        mode: \"cors\",\n        credentials: \"omit\",\n        cache: useCache ? \"force-cache\" : \"default\",\n    });\n\n    if (req.status != 200) {\n        throw new Error(req.status + \" Unable to load \" + req.url);\n    }\n\n    return req;\n}\n\nexport async function loadDataIntoBuffer(res: Response, onProgress?: (progress: number) => void): Promise<Uint8Array> {\n    const reader = res.body!.getReader();\n    const contentLength = res.headers.get(\"content-length\");\n    const estimatedBytes = contentLength && !isNaN(parseInt(contentLength)) ? parseInt(contentLength) : undefined;\n\n    const chunks = [];\n    let receivedLength = 0;\n\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        chunks.push(value);\n        receivedLength += value.length;\n\n        if (onProgress && estimatedBytes) {\n            // Cap progress at 95% to account for inaccurate content-length (compression, etc.)\n            const rawProgress = receivedLength / estimatedBytes;\n            const cappedProgress = Math.min(rawProgress * 0.95, 0.95);\n            onProgress(cappedProgress);\n        }\n    }\n\n    const buffer = new Uint8Array(receivedLength);\n    let position = 0;\n    for (const chunk of chunks) {\n        buffer.set(chunk, position);\n        position += chunk.length;\n    }\n\n    // Always send final 100% progress when complete\n    if (onProgress) {\n        onProgress(1.0);\n    }\n\n    return buffer;\n}\n","import type { Scene } from \"../core/Scene\";\nimport { Splat } from \"../splats/Splat\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { initiateFetchRequest, loadDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass Loader {\n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        useCache: boolean = false,\n    ): Promise<Splat> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const buffer = await loadDataIntoBuffer(res, onProgress);\n        return this.LoadFromArrayBuffer(buffer.buffer, scene);\n    }\n\n    static async LoadFromFileAsync(file: File, scene: Scene, onProgress?: (progress: number) => void): Promise<Splat> {\n        const reader = new FileReader();\n        let splat = new Splat();\n        reader.onload = (e) => {\n            splat = this.LoadFromArrayBuffer(e.target!.result as ArrayBuffer, scene);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        return splat;\n    }\n\n    static LoadFromArrayBuffer(arrayBuffer: ArrayBufferLike, scene: Scene): Splat {\n        const buffer = new Uint8Array(arrayBuffer);\n        const data = SplatData.Deserialize(buffer);\n        const splat = new Splat(data);\n        scene.addObject(splat);\n        return splat;\n    }\n}\n\nexport { Loader };\n","import { Scene } from \"../core/Scene\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { Splat } from \"../splats/Splat\";\nimport { Converter } from \"../utils/Converter\";\nimport { initiateFetchRequest, loadDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass PLYLoader {\n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        format: string = \"\",\n        useCache: boolean = false,\n    ): Promise<Splat> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const plyData = await loadDataIntoBuffer(res, onProgress);\n\n        if (plyData[0] !== 112 || plyData[1] !== 108 || plyData[2] !== 121 || plyData[3] !== 10) {\n            throw new Error(\"Invalid PLY file\");\n        }\n\n        return this.LoadFromArrayBuffer(plyData.buffer, scene, format);\n    }\n\n    static async LoadFromFileAsync(\n        file: File,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        format: string = \"\",\n    ): Promise<Splat> {\n        const reader = new FileReader();\n        let splat = new Splat();\n        reader.onload = (e) => {\n            splat = this.LoadFromArrayBuffer(e.target!.result as ArrayBuffer, scene, format);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        return splat;\n    }\n\n    static LoadFromArrayBuffer(arrayBuffer: ArrayBufferLike, scene: Scene, format: string = \"\"): Splat {\n        const buffer = new Uint8Array(this._ParsePLYBuffer(arrayBuffer as ArrayBuffer, format));\n        const data = SplatData.Deserialize(buffer);\n        const splat = new Splat(data);\n        scene.addObject(splat);\n        return splat;\n    }\n\n    private static _ParsePLYBuffer(inputBuffer: ArrayBuffer, format: string): ArrayBuffer {\n        type PlyProperty = {\n            name: string;\n            type: string;\n            offset: number;\n        };\n\n        const ubuf = new Uint8Array(inputBuffer);\n        const headerText = new TextDecoder().decode(ubuf.slice(0, 1024 * 10));\n        const header_end = \"end_header\\n\";\n        const header_end_index = headerText.indexOf(header_end);\n        if (header_end_index < 0) throw new Error(\"Unable to read .ply file header\");\n\n        const vertexCount = parseInt(/element vertex (\\d+)\\n/.exec(headerText)![1]);\n\n        let rowOffset = 0;\n        const offsets: Record<string, number> = {\n            double: 8,\n            int: 4,\n            uint: 4,\n            float: 4,\n            short: 2,\n            ushort: 2,\n            uchar: 1,\n        };\n\n        const properties: PlyProperty[] = [];\n        for (const prop of headerText\n            .slice(0, header_end_index)\n            .split(\"\\n\")\n            .filter((k) => k.startsWith(\"property \"))) {\n            const [_p, type, name] = prop.split(\" \");\n            properties.push({ name, type, offset: rowOffset });\n\n            if (!offsets[type]) throw new Error(`Unsupported property type: ${type}`);\n            rowOffset += offsets[type];\n        }\n\n        const dataView = new DataView(inputBuffer, header_end_index + header_end.length);\n        const buffer = new ArrayBuffer(SplatData.RowLength * vertexCount);\n\n        const q_polycam = Quaternion.FromEuler(new Vector3(Math.PI / 2, 0, 0));\n\n        for (let i = 0; i < vertexCount; i++) {\n            const position = new Float32Array(buffer, i * SplatData.RowLength, 3);\n            const scale = new Float32Array(buffer, i * SplatData.RowLength + 12, 3);\n            const rgba = new Uint8ClampedArray(buffer, i * SplatData.RowLength + 24, 4);\n            const rot = new Uint8ClampedArray(buffer, i * SplatData.RowLength + 28, 4);\n\n            let r0: number = 255;\n            let r1: number = 0;\n            let r2: number = 0;\n            let r3: number = 0;\n\n            properties.forEach((property) => {\n                let value;\n                switch (property.type) {\n                    case \"float\":\n                        value = dataView.getFloat32(property.offset + i * rowOffset, true);\n                        break;\n                    case \"int\":\n                        value = dataView.getInt32(property.offset + i * rowOffset, true);\n                        break;\n                    default:\n                        throw new Error(`Unsupported property type: ${property.type}`);\n                }\n\n                switch (property.name) {\n                    case \"x\":\n                        position[0] = value;\n                        break;\n                    case \"y\":\n                        position[1] = value;\n                        break;\n                    case \"z\":\n                        position[2] = value;\n                        break;\n                    case \"scale_0\":\n                    case \"scaling_0\":\n                        scale[0] = Math.exp(value);\n                        break;\n                    case \"scale_1\":\n                    case \"scaling_1\":\n                        scale[1] = Math.exp(value);\n                        break;\n                    case \"scale_2\":\n                    case \"scaling_2\":\n                        scale[2] = Math.exp(value);\n                        break;\n                    case \"red\":\n                        rgba[0] = value;\n                        break;\n                    case \"green\":\n                        rgba[1] = value;\n                        break;\n                    case \"blue\":\n                        rgba[2] = value;\n                        break;\n                    case \"f_dc_0\":\n                    case \"features_0\":\n                        rgba[0] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_1\":\n                    case \"features_1\":\n                        rgba[1] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_2\":\n                    case \"features_2\":\n                        rgba[2] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_3\":\n                        rgba[3] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"opacity\":\n                    case \"opacity_0\":\n                        rgba[3] = (1 / (1 + Math.exp(-value))) * 255;\n                        break;\n                    case \"rot_0\":\n                    case \"rotation_0\":\n                        r0 = value;\n                        break;\n                    case \"rot_1\":\n                    case \"rotation_1\":\n                        r1 = value;\n                        break;\n                    case \"rot_2\":\n                    case \"rotation_2\":\n                        r2 = value;\n                        break;\n                    case \"rot_3\":\n                    case \"rotation_3\":\n                        r3 = value;\n                        break;\n                }\n            });\n\n            let q = new Quaternion(r1, r2, r3, r0);\n\n            switch (format) {\n                case \"polycam\": {\n                    const temp = position[1];\n                    position[1] = -position[2];\n                    position[2] = temp;\n                    q = q_polycam.multiply(q);\n                    break;\n                }\n                case \"\":\n                    break;\n                default:\n                    throw new Error(`Unsupported format: ${format}`);\n            }\n\n            q = q.normalize();\n            rot[0] = q.w * 128 + 128;\n            rot[1] = q.x * 128 + 128;\n            rot[2] = q.y * 128 + 128;\n            rot[3] = q.z * 128 + 128;\n        }\n\n        return buffer;\n    }\n}\n\nexport { PLYLoader };\n","import { Camera } from \"../cameras/Camera\";\nimport type { Scene } from \"../core/Scene\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Splatv } from \"../splats/Splatv\";\nimport { SplatvData } from \"../splats/SplatvData\";\nimport { initiateFetchRequest, loadDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass SplatvLoader {\n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        camera: Camera | null,\n        onProgress?: (progress: number) => void,\n        useCache: boolean = false,\n    ): Promise<Splatv> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const buffer = await loadDataIntoBuffer(res, onProgress);\n        return this._ParseSplatvBuffer(buffer.buffer as ArrayBuffer, scene, camera);\n    }\n\n    static async LoadFromFileAsync(\n        file: File,\n        scene: Scene,\n        camera: Camera | null,\n        onProgress?: (progress: number) => void,\n    ): Promise<Splatv> {\n        const reader = new FileReader();\n        let splatv: Splatv | null = null;\n        reader.onload = (e) => {\n            splatv = this._ParseSplatvBuffer(e.target!.result as ArrayBuffer, scene, camera);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        if (!splatv) {\n            throw new Error(\"Failed to load splatv file\");\n        }\n        return splatv;\n    }\n\n    private static _ParseSplatvBuffer(inputBuffer: ArrayBuffer, scene: Scene, camera: Camera | null): Splatv {\n        let result: Splatv | null = null;\n\n        const handleChunk = (\n            chunk: { size: number; type: string; texwidth: number; texheight: number },\n            buffer: Uint8Array,\n            chunks: { size: number; type: string }[],\n        ) => {\n            if (chunk.type === \"magic\") {\n                const intView = new Int32Array(buffer.buffer);\n                if (intView[0] !== 0x674b) {\n                    throw new Error(\"Invalid splatv file\");\n                }\n                chunks.push({ size: intView[1], type: \"chunks\" });\n            } else if (chunk.type === \"chunks\") {\n                const splatChunks = JSON.parse(new TextDecoder(\"utf-8\").decode(buffer));\n                if (splatChunks.length == 0) {\n                    throw new Error(\"Invalid splatv file\");\n                } else if (splatChunks.length > 1) {\n                    console.warn(\"Splatv file contains more than one chunk, only the first one will be loaded\");\n                }\n                const chunk = splatChunks[0];\n                const cameras = chunk.cameras as { position: number[]; rotation: number[][] }[];\n                if (camera && cameras && cameras.length) {\n                    const cameraData = cameras[0];\n                    const position = new Vector3(\n                        cameraData.position[0],\n                        cameraData.position[1],\n                        cameraData.position[2],\n                    );\n                    const rotation = Quaternion.FromMatrix3(\n                        new Matrix3(\n                            cameraData.rotation[0][0],\n                            cameraData.rotation[0][1],\n                            cameraData.rotation[0][2],\n                            cameraData.rotation[1][0],\n                            cameraData.rotation[1][1],\n                            cameraData.rotation[1][2],\n                            cameraData.rotation[2][0],\n                            cameraData.rotation[2][1],\n                            cameraData.rotation[2][2],\n                        ),\n                    );\n                    camera.position = position;\n                    camera.rotation = rotation;\n                }\n                chunks.push(chunk);\n            } else if (chunk.type === \"splat\") {\n                const data = SplatvData.Deserialize(buffer, chunk.texwidth, chunk.texheight);\n                const splatv = new Splatv(data);\n                scene.addObject(splatv);\n                result = splatv;\n            }\n        };\n\n        const ubuf = new Uint8Array(inputBuffer);\n        const chunks: { size: number; type: string; texwidth: number; texheight: number }[] = [\n            { size: 8, type: \"magic\", texwidth: 0, texheight: 0 },\n        ];\n        let chunk: { size: number; type: string; texwidth: number; texheight: number } | undefined = chunks.shift();\n        let buffer = new Uint8Array(chunk!.size);\n        let offset = 0;\n        let inputOffset = 0;\n        while (chunk) {\n            while (offset < chunk.size) {\n                const sizeToRead = Math.min(chunk.size - offset, ubuf.length - inputOffset);\n                buffer.set(ubuf.subarray(inputOffset, inputOffset + sizeToRead), offset);\n                offset += sizeToRead;\n                inputOffset += sizeToRead;\n            }\n            handleChunk(chunk, buffer, chunks);\n            if (result) {\n                return result;\n            }\n            chunk = chunks.shift();\n            if (chunk) {\n                buffer = new Uint8Array(chunk.size);\n                offset = 0;\n            }\n        }\n\n        throw new Error(\"Invalid splatv file\");\n    }\n}\n\nexport { SplatvLoader };\n","import { Camera } from \"../../../cameras/Camera\";\nimport { Scene } from \"../../../core/Scene\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\n\nabstract class ShaderProgram {\n    private _renderer: WebGLRenderer;\n    private _program: WebGLProgram;\n    private _passes: ShaderPass[];\n\n    protected _scene: Scene | null = null;\n    protected _camera: Camera | null = null;\n    protected _started: boolean = false;\n    protected _initialized: boolean = false;\n\n    protected abstract _initialize: () => void;\n    protected abstract _resize: () => void;\n    protected abstract _render: () => void;\n    protected abstract _dispose: () => void;\n\n    initialize: () => void;\n    resize: () => void;\n    render: (scene: Scene, camera: Camera) => void;\n    dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[]) {\n        this._renderer = renderer;\n        const gl = renderer.gl;\n\n        this._program = gl.createProgram() as WebGLProgram;\n        this._passes = passes || [];\n\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\n        gl.shaderSource(vertexShader, this._getVertexSource());\n        gl.compileShader(vertexShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(vertexShader));\n        }\n\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\n        gl.shaderSource(fragmentShader, this._getFragmentSource());\n        gl.compileShader(fragmentShader);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(fragmentShader));\n        }\n\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            console.error(gl.getProgramInfoLog(this.program));\n        }\n\n        this.resize = () => {\n            gl.useProgram(this._program);\n\n            this._resize();\n        };\n\n        this.initialize = () => {\n            console.assert(!this._initialized, \"ShaderProgram already initialized\");\n\n            gl.useProgram(this._program);\n\n            this._initialize();\n            for (const pass of this.passes) {\n                pass.initialize(this);\n            }\n\n            this._initialized = true;\n            this._started = true;\n        };\n\n        this.render = (scene: Scene, camera: Camera) => {\n            gl.useProgram(this._program);\n\n            if (this._scene !== scene || this._camera !== camera) {\n                this.dispose();\n                this._scene = scene;\n                this._camera = camera;\n                this.initialize();\n            }\n\n            for (const pass of this.passes) {\n                pass.render();\n            }\n\n            this._render();\n        };\n\n        this.dispose = () => {\n            if (!this._initialized) return;\n\n            gl.useProgram(this._program);\n\n            for (const pass of this.passes) {\n                pass.dispose();\n            }\n\n            this._dispose();\n\n            this._scene = null;\n            this._camera = null;\n            this._initialized = false;\n        };\n    }\n\n    get renderer() {\n        return this._renderer;\n    }\n\n    get scene() {\n        return this._scene;\n    }\n\n    get camera() {\n        return this._camera;\n    }\n\n    get program() {\n        return this._program;\n    }\n\n    get passes() {\n        return this._passes;\n    }\n\n    get started() {\n        return this._started;\n    }\n\n    protected abstract _getVertexSource(): string;\n    protected abstract _getFragmentSource(): string;\n}\n\nexport { ShaderProgram };\n","async function createDataModule(moduleArg={}){var moduleRtn;var Module=moduleArg;var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=true;var arguments_=[];var thisProgram=\"./this.program\";var _scriptName=import.meta.url;var scriptDirectory=\"\";var readAsync,readBinary;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){try{scriptDirectory=new URL(\".\",_scriptName).href}catch{}{if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=async url=>{var response=await fetch(url,{credentials:\"same-origin\"});if(response.ok){return response.arrayBuffer()}throw new Error(response.status+\" : \"+response.url)}}}else{}var out=console.log.bind(console);var err=console.error.bind(console);var wasmBinary;var ABORT=false;var readyPromiseResolve,readyPromiseReject;var wasmMemory;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var HEAP64,HEAPU64;var runtimeInitialized=false;function updateMemoryViews(){var b=wasmMemory.buffer;HEAP8=new Int8Array(b);HEAP16=new Int16Array(b);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(b);HEAPU16=new Uint16Array(b);HEAP32=new Int32Array(b);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(b);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(b);HEAPF64=new Float64Array(b);HEAP64=new BigInt64Array(b);HEAPU64=new BigUint64Array(b)}function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(onPreRuns)}function initRuntime(){runtimeInitialized=true;wasmExports[\"c\"]()}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(onPostRuns)}var wasmBinaryFile;function findWasmBinary(){return base64Decode(\"\")}function getBinarySync(file){if(ArrayBuffer.isView(file)){return file}if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw'sync fetching of the wasm failed: you can preload it to Module[\"wasmBinary\"] manually, or emcc.py will do that for you when generating HTML (but not JS)'}function instantiateSync(file,info){var module;var binary=getBinarySync(file);module=new WebAssembly.Module(binary);var instance=new WebAssembly.Instance(module,info);return[instance,module]}function getWasmImports(){return{a:wasmImports}}function createWasm(){function receiveInstance(instance,module){wasmExports=instance.exports;wasmMemory=wasmExports[\"b\"];updateMemoryViews();assignWasmExports(wasmExports);return wasmExports}var info=getWasmImports();if(Module[\"instantiateWasm\"]){return new Promise((resolve,reject)=>{Module[\"instantiateWasm\"](info,(mod,inst)=>{resolve(receiveInstance(mod,inst))})})}wasmBinaryFile??=findWasmBinary();var result=instantiateSync(wasmBinaryFile,info);return receiveInstance(result[0])}class ExitStatus{name=\"ExitStatus\";constructor(status){this.message=`Program terminated with exit(${status})`;this.status=status}}var callRuntimeCallbacks=callbacks=>{while(callbacks.length>0){callbacks.shift()(Module)}};var onPostRuns=[];var addOnPostRun=cb=>onPostRuns.push(cb);var onPreRuns=[];var addOnPreRun=cb=>onPreRuns.push(cb);var base64Decode=b64=>{var b1,b2,i=0,j=0,bLength=b64.length;var output=new Uint8Array((bLength*3>>2)-(b64[bLength-2]==\"=\")-(b64[bLength-1]==\"=\"));for(;i<bLength;i+=4,j+=3){b1=base64ReverseLookup[b64.charCodeAt(i+1)];b2=base64ReverseLookup[b64.charCodeAt(i+2)];output[j]=base64ReverseLookup[b64.charCodeAt(i)]<<2|b1>>4;output[j+1]=b1<<4|b2>>2;output[j+2]=b2<<6|base64ReverseLookup[b64.charCodeAt(i+3)]}return output};var noExitRuntime=true;var getHeapMax=()=>2147483648;var alignMemory=(size,alignment)=>Math.ceil(size/alignment)*alignment;var growMemory=size=>{var oldHeapSize=wasmMemory.buffer.byteLength;var pages=(size-oldHeapSize+65535)/65536|0;try{wasmMemory.grow(pages);updateMemoryViews();return 1}catch(e){}};var _emscripten_resize_heap=requestedSize=>{var oldSize=HEAPU8.length;requestedSize>>>=0;var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignMemory(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=growMemory(newSize);if(replacement){return true}}return false};for(var base64ReverseLookup=new Uint8Array(123),i=25;i>=0;--i){base64ReverseLookup[48+i]=52+i;base64ReverseLookup[65+i]=i;base64ReverseLookup[97+i]=26+i}base64ReverseLookup[43]=62;base64ReverseLookup[47]=63;{if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(Module[\"print\"])out=Module[\"print\"];if(Module[\"printErr\"])err=Module[\"printErr\"];if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].shift()()}}}var _pack,_malloc,_free;function assignWasmExports(wasmExports){Module[\"_pack\"]=_pack=wasmExports[\"d\"];Module[\"_malloc\"]=_malloc=wasmExports[\"e\"];Module[\"_free\"]=_free=wasmExports[\"f\"]}var wasmImports={a:_emscripten_resize_heap};function run(){preRun();function doRun(){Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();readyPromiseResolve?.(Module);Module[\"onRuntimeInitialized\"]?.();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(()=>{setTimeout(()=>Module[\"setStatus\"](\"\"),1);doRun()},1)}else{doRun()}}var wasmExports;wasmExports=createWasm();run();if(runtimeInitialized){moduleRtn=Module}else{moduleRtn=new Promise((resolve,reject)=>{readyPromiseResolve=resolve;readyPromiseReject=reject})}\n;return moduleRtn}export default createDataModule;\n","import { Scene } from \"../../../core/Scene\";\nimport { Splat } from \"../../../splats/Splat\";\nimport DataWorker from \"./DataWorker.ts?worker&inline\";\nconst createDataWorker = () => new DataWorker();\nimport createDataModule from \"../../../wasm/data.js\";\nimport { Matrix4 } from \"../../../math/Matrix4\";\n\nclass RenderData {\n    public dataChanged = false;\n    public transformsChanged = false;\n    public colorTransformsChanged = false;\n\n    private _splatIndices: Map<Splat, number>;\n    private _offsets: Map<Splat, number>;\n    private _data: Uint32Array;\n    private _width: number;\n    private _height: number;\n    private _transforms: Float32Array;\n    private _transformsWidth: number;\n    private _transformsHeight: number;\n    private _transformIndices: Uint32Array;\n    private _transformIndicesWidth: number;\n    private _transformIndicesHeight: number;\n    private _colorTransforms: Float32Array;\n    private _colorTransformsWidth: number;\n    private _colorTransformsHeight: number;\n    private _colorTransformIndices: Uint32Array;\n    private _colorTransformIndicesWidth: number;\n    private _colorTransformIndicesHeight: number;\n    private _positions: Float32Array;\n    private _rotations: Float32Array;\n    private _scales: Float32Array;\n    private _vertexCount: number;\n    private _updating: Set<Splat> = new Set<Splat>();\n    private _dirty: Set<Splat> = new Set<Splat>();\n    private _worker: Worker;\n\n    getSplat: (index: number) => Splat | null;\n    getLocalIndex: (splat: Splat, index: number) => number;\n    markDirty: (splat: Splat) => void;\n    rebuild: () => void;\n    dispose: () => void;\n\n    constructor(scene: Scene) {\n        let vertexCount = 0;\n        let splatIndex = 0;\n        this._splatIndices = new Map<Splat, number>();\n        this._offsets = new Map<Splat, number>();\n        const lookup = new Map<number, Splat>();\n        for (const object of scene.objects) {\n            if (object instanceof Splat) {\n                this._splatIndices.set(object, splatIndex);\n                this._offsets.set(object, vertexCount);\n                lookup.set(vertexCount, object);\n                vertexCount += object.data.vertexCount;\n                splatIndex++;\n            }\n        }\n\n        this._vertexCount = vertexCount;\n        this._width = 2048;\n        this._height = Math.ceil((2 * this.vertexCount) / this.width);\n        this._data = new Uint32Array(this.width * this.height * 4);\n\n        this._transformsWidth = 5;\n        this._transformsHeight = lookup.size;\n        this._transforms = new Float32Array(this._transformsWidth * this._transformsHeight * 4);\n\n        this._transformIndicesWidth = 1024;\n        this._transformIndicesHeight = Math.ceil(this.vertexCount / this._transformIndicesWidth);\n        this._transformIndices = new Uint32Array(this._transformIndicesWidth * this._transformIndicesHeight);\n\n        this._colorTransformsWidth = 4;\n        this._colorTransformsHeight = 64;\n        this._colorTransforms = new Float32Array(this._colorTransformsWidth * this._colorTransformsHeight * 4);\n        this._colorTransforms.fill(0);\n        this._colorTransforms[0] = 1;\n        this._colorTransforms[5] = 1;\n        this._colorTransforms[10] = 1;\n        this._colorTransforms[15] = 1;\n\n        this._colorTransformIndicesWidth = 1024;\n        this._colorTransformIndicesHeight = Math.ceil(this.vertexCount / this._colorTransformIndicesWidth);\n        this._colorTransformIndices = new Uint32Array(\n            this._colorTransformIndicesWidth * this._colorTransformIndicesHeight,\n        );\n        this.colorTransformIndices.fill(0);\n\n        this._positions = new Float32Array(this.vertexCount * 3);\n        this._rotations = new Float32Array(this.vertexCount * 4);\n        this._scales = new Float32Array(this.vertexCount * 3);\n\n        this._worker = createDataWorker();\n\n        const updateTransform = (splat: Splat) => {\n            const splatIndex = this._splatIndices.get(splat) as number;\n            this._transforms.set(splat.transform.buffer, splatIndex * 20);\n            this._transforms[splatIndex * 20 + 16] = splat.selected ? 1 : 0;\n            splat.positionChanged = false;\n            splat.rotationChanged = false;\n            splat.scaleChanged = false;\n            splat.selectedChanged = false;\n            this.transformsChanged = true;\n        };\n\n        const updateColorTransforms = () => {\n            let colorTransformsChanged = false;\n            for (const splat of this._splatIndices.keys()) {\n                if (splat.colorTransformChanged) {\n                    colorTransformsChanged = true;\n                    break;\n                }\n            }\n            if (!colorTransformsChanged) {\n                return;\n            }\n            const colorTransformsMap: Matrix4[] = [new Matrix4()];\n            this._colorTransformIndices.fill(0);\n            let i = 1;\n            for (const splat of this._splatIndices.keys()) {\n                const offset = this._offsets.get(splat) as number;\n                for (const colorTransform of splat.colorTransforms) {\n                    if (!colorTransformsMap.includes(colorTransform)) {\n                        colorTransformsMap.push(colorTransform);\n                        i++;\n                    }\n                }\n                for (const index of splat.colorTransformsMap.keys()) {\n                    const colorTransformIndex = splat.colorTransformsMap.get(index) as number;\n                    this._colorTransformIndices[index + offset] = colorTransformIndex + i - 1;\n                }\n                splat.colorTransformChanged = false;\n            }\n            for (let index = 0; index < colorTransformsMap.length; index++) {\n                const colorTransform = colorTransformsMap[index];\n                this._colorTransforms.set(colorTransform.buffer, index * 16);\n            }\n            this.colorTransformsChanged = true;\n        };\n\n        this._worker.onmessage = (e) => {\n            if (e.data.response) {\n                const response = e.data.response;\n                const splat = lookup.get(response.offset) as Splat;\n                updateTransform(splat);\n                updateColorTransforms();\n\n                const splatIndex = this._splatIndices.get(splat) as number;\n                for (let i = 0; i < splat.data.vertexCount; i++) {\n                    this._transformIndices[response.offset + i] = splatIndex;\n                }\n\n                this._data.set(response.data, response.offset * 8);\n                splat.data.reattach(\n                    response.positions,\n                    response.rotations,\n                    response.scales,\n                    response.colors,\n                    response.selection,\n                );\n\n                this._positions.set(response.worldPositions, response.offset * 3);\n                this._rotations.set(response.worldRotations, response.offset * 4);\n                this._scales.set(response.worldScales, response.offset * 3);\n\n                this._updating.delete(splat);\n\n                splat.selectedChanged = false;\n\n                this.dataChanged = true;\n            }\n        };\n\n        let wasmModule: any;\n\n        async function initWasm() {\n            wasmModule = await createDataModule();\n        }\n\n        initWasm();\n\n        async function waitForWasm() {\n            while (!wasmModule) {\n                await new Promise((resolve) => setTimeout(resolve, 0));\n            }\n        }\n\n        const buildImmediate = (splat: Splat) => {\n            if (!wasmModule) {\n                waitForWasm().then(() => {\n                    buildImmediate(splat);\n                });\n                return;\n            }\n\n            updateTransform(splat);\n\n            const positionsPtr = wasmModule._malloc(3 * splat.data.vertexCount * 4);\n            const rotationsPtr = wasmModule._malloc(4 * splat.data.vertexCount * 4);\n            const scalesPtr = wasmModule._malloc(3 * splat.data.vertexCount * 4);\n            const colorsPtr = wasmModule._malloc(4 * splat.data.vertexCount);\n            const selectionPtr = wasmModule._malloc(splat.data.vertexCount);\n            const dataPtr = wasmModule._malloc(8 * splat.data.vertexCount * 4);\n            const worldPositionsPtr = wasmModule._malloc(3 * splat.data.vertexCount * 4);\n            const worldRotationsPtr = wasmModule._malloc(4 * splat.data.vertexCount * 4);\n            const worldScalesPtr = wasmModule._malloc(3 * splat.data.vertexCount * 4);\n\n            wasmModule.HEAPF32.set(splat.data.positions, positionsPtr / 4);\n            wasmModule.HEAPF32.set(splat.data.rotations, rotationsPtr / 4);\n            wasmModule.HEAPF32.set(splat.data.scales, scalesPtr / 4);\n            wasmModule.HEAPU8.set(splat.data.colors, colorsPtr);\n            wasmModule.HEAPU8.set(splat.data.selection, selectionPtr);\n\n            wasmModule._pack(\n                splat.selected,\n                splat.data.vertexCount,\n                positionsPtr,\n                rotationsPtr,\n                scalesPtr,\n                colorsPtr,\n                selectionPtr,\n                dataPtr,\n                worldPositionsPtr,\n                worldRotationsPtr,\n                worldScalesPtr,\n            );\n\n            const outData = new Uint32Array(wasmModule.HEAPU32.buffer, dataPtr, splat.data.vertexCount * 8);\n            const worldPositions = new Float32Array(\n                wasmModule.HEAPF32.buffer,\n                worldPositionsPtr,\n                splat.data.vertexCount * 3,\n            );\n            const worldRotations = new Float32Array(\n                wasmModule.HEAPF32.buffer,\n                worldRotationsPtr,\n                splat.data.vertexCount * 4,\n            );\n            const worldScales = new Float32Array(wasmModule.HEAPF32.buffer, worldScalesPtr, splat.data.vertexCount * 3);\n\n            const splatIndex = this._splatIndices.get(splat) as number;\n            const offset = this._offsets.get(splat) as number;\n            for (let i = 0; i < splat.data.vertexCount; i++) {\n                this._transformIndices[offset + i] = splatIndex;\n            }\n            this._data.set(outData, offset * 8);\n            this._positions.set(worldPositions, offset * 3);\n            this._rotations.set(worldRotations, offset * 4);\n            this._scales.set(worldScales, offset * 3);\n\n            wasmModule._free(positionsPtr);\n            wasmModule._free(rotationsPtr);\n            wasmModule._free(scalesPtr);\n            wasmModule._free(colorsPtr);\n            wasmModule._free(selectionPtr);\n            wasmModule._free(dataPtr);\n            wasmModule._free(worldPositionsPtr);\n            wasmModule._free(worldRotationsPtr);\n            wasmModule._free(worldScalesPtr);\n\n            this.dataChanged = true;\n            this.colorTransformsChanged = true;\n        };\n\n        const build = (splat: Splat) => {\n            if (splat.positionChanged || splat.rotationChanged || splat.scaleChanged || splat.selectedChanged) {\n                updateTransform(splat);\n            }\n\n            if (splat.colorTransformChanged) {\n                updateColorTransforms();\n            }\n\n            if (!splat.data.changed || splat.data.detached) return;\n\n            const serializedSplat = {\n                position: new Float32Array(splat.position.flat()),\n                rotation: new Float32Array(splat.rotation.flat()),\n                scale: new Float32Array(splat.scale.flat()),\n                selected: splat.selected,\n                vertexCount: splat.data.vertexCount,\n                positions: splat.data.positions,\n                rotations: splat.data.rotations,\n                scales: splat.data.scales,\n                colors: splat.data.colors,\n                selection: splat.data.selection,\n                offset: this._offsets.get(splat) as number,\n            };\n\n            this._worker.postMessage(\n                {\n                    splat: serializedSplat,\n                },\n                [\n                    serializedSplat.position.buffer,\n                    serializedSplat.rotation.buffer,\n                    serializedSplat.scale.buffer,\n                    serializedSplat.positions.buffer,\n                    serializedSplat.rotations.buffer,\n                    serializedSplat.scales.buffer,\n                    serializedSplat.colors.buffer,\n                    serializedSplat.selection.buffer,\n                ],\n            );\n\n            this._updating.add(splat);\n\n            splat.data.detached = true;\n        };\n\n        this.getSplat = (index: number) => {\n            let splat = null;\n            for (const [key, value] of this._offsets) {\n                if (index >= value) {\n                    splat = key;\n                } else {\n                    break;\n                }\n            }\n            return splat;\n        };\n\n        this.getLocalIndex = (splat: Splat, index: number) => {\n            const offset = this._offsets.get(splat) as number;\n            return index - offset;\n        };\n\n        this.markDirty = (splat: Splat) => {\n            this._dirty.add(splat);\n        };\n\n        this.rebuild = () => {\n            for (const splat of this._dirty) {\n                build(splat);\n            }\n\n            this._dirty.clear();\n        };\n\n        this.dispose = () => {\n            this._worker.terminate();\n        };\n\n        for (const splat of this._splatIndices.keys()) {\n            buildImmediate(splat);\n        }\n\n        updateColorTransforms();\n    }\n\n    get offsets() {\n        return this._offsets;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get transforms() {\n        return this._transforms;\n    }\n\n    get transformsWidth() {\n        return this._transformsWidth;\n    }\n\n    get transformsHeight() {\n        return this._transformsHeight;\n    }\n\n    get transformIndices() {\n        return this._transformIndices;\n    }\n\n    get transformIndicesWidth() {\n        return this._transformIndicesWidth;\n    }\n\n    get transformIndicesHeight() {\n        return this._transformIndicesHeight;\n    }\n\n    get colorTransforms() {\n        return this._colorTransforms;\n    }\n\n    get colorTransformsWidth() {\n        return this._colorTransformsWidth;\n    }\n\n    get colorTransformsHeight() {\n        return this._colorTransformsHeight;\n    }\n\n    get colorTransformIndices() {\n        return this._colorTransformIndices;\n    }\n\n    get colorTransformIndicesWidth() {\n        return this._colorTransformIndicesWidth;\n    }\n\n    get colorTransformIndicesHeight() {\n        return this._colorTransformIndicesHeight;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n\n    get rotations() {\n        return this._rotations;\n    }\n\n    get scales() {\n        return this._scales;\n    }\n\n    get vertexCount() {\n        return this._vertexCount;\n    }\n\n    get needsRebuild() {\n        return this._dirty.size > 0;\n    }\n\n    get updating() {\n        return this._updating.size > 0;\n    }\n}\n\nexport { RenderData };\n","class Color32 {\n    public readonly r: number;\n    public readonly g: number;\n    public readonly b: number;\n    public readonly a: number;\n\n    constructor(r: number = 0, g: number = 0, b: number = 0, a: number = 255) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    flat(): number[] {\n        return [this.r, this.g, this.b, this.a];\n    }\n\n    flatNorm(): number[] {\n        return [this.r / 255, this.g / 255, this.b / 255, this.a / 255];\n    }\n\n    toHexString(): string {\n        return (\n            \"#\" +\n            this.flat()\n                .map((x) => x.toString(16).padStart(2, \"0\"))\n                .join(\"\")\n        );\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Color32 };\n","import SortWorker from \"../utils/SortWorker.ts?worker&inline\";\nconst createSortWorker = () => new SortWorker();\n\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\nimport { RenderData } from \"../utils/RenderData\";\nimport { Color32 } from \"../../../math/Color32\";\nimport { ObjectAddedEvent, ObjectChangedEvent, ObjectRemovedEvent } from \"../../../events/Events\";\nimport { Splat } from \"../../../splats/Splat\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\nimport { Scene } from \"../../../core/Scene\";\n\nconst vertexShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform highp sampler2D u_colorTransforms;\nuniform highp usampler2D u_colorTransformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111\n    cov2d[0][0] += 1.0;\n    cov2d[1][1] += 1.0;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 colorTransform = mat4(\n        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)\n    );\n\n    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vColor = colorTransform * color;\n\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n`;\n\nconst fragmentShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n`;\n\nclass RenderProgram extends ShaderProgram {\n    private _outlineThickness: number = 10.0;\n    private _outlineColor: Color32 = new Color32(255, 165, 0, 255);\n    private _renderData: RenderData | null = null;\n    private _depthIndex: Uint32Array = new Uint32Array();\n    private _splatTexture: WebGLTexture | null = null;\n    private _worker: Worker | null = null;\n\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    private _setOutlineThickness: (value: number) => void;\n    private _setOutlineColor: (value: Color32) => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[]) {\n        super(renderer, passes);\n\n        const canvas = renderer.canvas;\n        const gl = renderer.gl;\n\n        let u_projection: WebGLUniformLocation;\n        let u_viewport: WebGLUniformLocation;\n        let u_focal: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_texture: WebGLUniformLocation;\n        let u_transforms: WebGLUniformLocation;\n        let u_transformIndices: WebGLUniformLocation;\n        let u_colorTransforms: WebGLUniformLocation;\n        let u_colorTransformIndices: WebGLUniformLocation;\n\n        let u_outlineThickness: WebGLUniformLocation;\n        let u_outlineColor: WebGLUniformLocation;\n\n        let positionAttribute: number;\n        let indexAttribute: number;\n\n        let transformsTexture: WebGLTexture;\n        let transformIndicesTexture: WebGLTexture;\n\n        let colorTransformsTexture: WebGLTexture;\n        let colorTransformIndicesTexture: WebGLTexture;\n\n        let vertexBuffer: WebGLBuffer;\n        let indexBuffer: WebGLBuffer;\n\n        this._resize = () => {\n            if (!this._camera) return;\n\n            this._camera.data.setSize(canvas.width, canvas.height);\n            this._camera.update();\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n\n            u_viewport = gl.getUniformLocation(this.program, \"viewport\") as WebGLUniformLocation;\n            gl.uniform2fv(u_viewport, new Float32Array([canvas.width, canvas.height]));\n        };\n\n        const createWorker = () => {\n            this._worker = createSortWorker();\n            this._worker!.onmessage = (e) => {\n                if (e.data.depthIndex) {\n                    const { depthIndex } = e.data;\n                    this._depthIndex = depthIndex;\n                    gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n                    gl.bufferData(gl.ARRAY_BUFFER, depthIndex, gl.STATIC_DRAW);\n                }\n            };\n        };\n\n        this._initialize = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            this._resize();\n\n            this._scene.addEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.addEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splat) {\n                    object.addEventListener(\"objectChanged\", handleObjectChanged);\n                }\n            }\n\n            this._renderData = new RenderData(this._scene);\n\n            u_focal = gl.getUniformLocation(this.program, \"focal\") as WebGLUniformLocation;\n            gl.uniform2fv(u_focal, new Float32Array([this._camera.data.fx, this._camera.data.fy]));\n\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            u_outlineThickness = gl.getUniformLocation(this.program, \"outlineThickness\") as WebGLUniformLocation;\n            gl.uniform1f(u_outlineThickness, this.outlineThickness);\n\n            u_outlineColor = gl.getUniformLocation(this.program, \"outlineColor\") as WebGLUniformLocation;\n            gl.uniform4fv(u_outlineColor, new Float32Array(this.outlineColor.flatNorm()));\n\n            this._splatTexture = gl.createTexture() as WebGLTexture;\n            u_texture = gl.getUniformLocation(this.program, \"u_texture\") as WebGLUniformLocation;\n            gl.uniform1i(u_texture, 0);\n\n            transformsTexture = gl.createTexture() as WebGLTexture;\n            u_transforms = gl.getUniformLocation(this.program, \"u_transforms\") as WebGLUniformLocation;\n            gl.uniform1i(u_transforms, 1);\n\n            transformIndicesTexture = gl.createTexture() as WebGLTexture;\n            u_transformIndices = gl.getUniformLocation(this.program, \"u_transformIndices\") as WebGLUniformLocation;\n            gl.uniform1i(u_transformIndices, 2);\n\n            colorTransformsTexture = gl.createTexture() as WebGLTexture;\n            u_colorTransforms = gl.getUniformLocation(this.program, \"u_colorTransforms\") as WebGLUniformLocation;\n            gl.uniform1i(u_colorTransforms, 3);\n\n            colorTransformIndicesTexture = gl.createTexture() as WebGLTexture;\n            u_colorTransformIndices = gl.getUniformLocation(\n                this.program,\n                \"u_colorTransformIndices\",\n            ) as WebGLUniformLocation;\n            gl.uniform1i(u_colorTransformIndices, 4);\n\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), gl.STATIC_DRAW);\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            indexBuffer = gl.createBuffer() as WebGLBuffer;\n            indexAttribute = gl.getAttribLocation(this.program, \"index\");\n            gl.enableVertexAttribArray(indexAttribute);\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n\n            createWorker();\n        };\n\n        const handleObjectAdded = (event: Event) => {\n            const e = event as ObjectAddedEvent;\n\n            if (e.object instanceof Splat) {\n                e.object.addEventListener(\"objectChanged\", handleObjectChanged);\n            }\n\n            resetSplatData();\n        };\n\n        const handleObjectRemoved = (event: Event) => {\n            const e = event as ObjectRemovedEvent;\n\n            if (e.object instanceof Splat) {\n                e.object.removeEventListener(\"objectChanged\", handleObjectChanged);\n            }\n\n            resetSplatData();\n        };\n\n        const handleObjectChanged = (event: Event) => {\n            const e = event as ObjectChangedEvent;\n\n            if (e.object instanceof Splat && this._renderData) {\n                this._renderData.markDirty(e.object);\n            }\n        };\n\n        const resetSplatData = () => {\n            this._renderData?.dispose();\n            this._renderData = new RenderData(this._scene as Scene);\n\n            this._worker?.terminate();\n            createWorker();\n        };\n\n        this._render = () => {\n            if (!this._scene || !this._camera || !this.renderData) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            if (this.renderData.needsRebuild) {\n                this.renderData.rebuild();\n            }\n\n            if (\n                this.renderData.dataChanged ||\n                this.renderData.transformsChanged ||\n                this.renderData.colorTransformsChanged\n            ) {\n                if (this.renderData.dataChanged) {\n                    gl.activeTexture(gl.TEXTURE0);\n                    gl.bindTexture(gl.TEXTURE_2D, this.splatTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32UI,\n                        this.renderData.width,\n                        this.renderData.height,\n                        0,\n                        gl.RGBA_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.data,\n                    );\n                }\n\n                if (this.renderData.transformsChanged) {\n                    gl.activeTexture(gl.TEXTURE1);\n                    gl.bindTexture(gl.TEXTURE_2D, transformsTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32F,\n                        this.renderData.transformsWidth,\n                        this.renderData.transformsHeight,\n                        0,\n                        gl.RGBA,\n                        gl.FLOAT,\n                        this.renderData.transforms,\n                    );\n\n                    gl.activeTexture(gl.TEXTURE2);\n                    gl.bindTexture(gl.TEXTURE_2D, transformIndicesTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.R32UI,\n                        this.renderData.transformIndicesWidth,\n                        this.renderData.transformIndicesHeight,\n                        0,\n                        gl.RED_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.transformIndices,\n                    );\n                }\n\n                if (this.renderData.colorTransformsChanged) {\n                    gl.activeTexture(gl.TEXTURE3);\n                    gl.bindTexture(gl.TEXTURE_2D, colorTransformsTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32F,\n                        this.renderData.colorTransformsWidth,\n                        this.renderData.colorTransformsHeight,\n                        0,\n                        gl.RGBA,\n                        gl.FLOAT,\n                        this.renderData.colorTransforms,\n                    );\n\n                    gl.activeTexture(gl.TEXTURE4);\n                    gl.bindTexture(gl.TEXTURE_2D, colorTransformIndicesTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.R32UI,\n                        this.renderData.colorTransformIndicesWidth,\n                        this.renderData.colorTransformIndicesHeight,\n                        0,\n                        gl.RED_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.colorTransformIndices,\n                    );\n                }\n\n                const detachedPositions = new Float32Array(this.renderData.positions.slice().buffer);\n                const detachedTransforms = new Float32Array(this.renderData.transforms.slice().buffer);\n                const detachedTransformIndices = new Uint32Array(this.renderData.transformIndices.slice().buffer);\n                this._worker?.postMessage(\n                    {\n                        sortData: {\n                            positions: detachedPositions,\n                            transforms: detachedTransforms,\n                            transformIndices: detachedTransformIndices,\n                            vertexCount: this.renderData.vertexCount,\n                        },\n                    },\n                    [detachedPositions.buffer, detachedTransforms.buffer, detachedTransformIndices.buffer],\n                );\n\n                this.renderData.dataChanged = false;\n                this.renderData.transformsChanged = false;\n                this.renderData.colorTransformsChanged = false;\n            }\n\n            this._camera.update();\n            this._worker?.postMessage({ viewProj: this._camera.data.viewProj.buffer });\n\n            gl.viewport(0, 0, canvas.width, canvas.height);\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n\n            gl.disable(gl.DEPTH_TEST);\n            gl.enable(gl.BLEND);\n            gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.ONE, gl.ONE_MINUS_DST_ALPHA, gl.ONE);\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.depthIndex, gl.STATIC_DRAW);\n            gl.vertexAttribIPointer(indexAttribute, 1, gl.INT, 0, 0);\n            gl.vertexAttribDivisor(indexAttribute, 1);\n\n            gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 4, this.depthIndex.length);\n        };\n\n        this._dispose = () => {\n            if (!this._scene || !this._camera || !this.renderData) {\n                console.error(\"Cannot dispose without scene and camera\");\n                return;\n            }\n\n            this._scene.removeEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.removeEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splat) {\n                    object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                }\n            }\n\n            this._worker?.terminate();\n            this.renderData.dispose();\n\n            gl.deleteTexture(this.splatTexture);\n            gl.deleteTexture(transformsTexture);\n            gl.deleteTexture(transformIndicesTexture);\n\n            gl.deleteBuffer(indexBuffer);\n            gl.deleteBuffer(vertexBuffer);\n        };\n\n        this._setOutlineThickness = (value: number) => {\n            this._outlineThickness = value;\n            if (this._initialized) {\n                gl.uniform1f(u_outlineThickness, value);\n            }\n        };\n\n        this._setOutlineColor = (value: Color32) => {\n            this._outlineColor = value;\n            if (this._initialized) {\n                gl.uniform4fv(u_outlineColor, new Float32Array(value.flatNorm()));\n            }\n        };\n    }\n\n    get renderData() {\n        return this._renderData;\n    }\n\n    get depthIndex() {\n        return this._depthIndex;\n    }\n\n    get splatTexture() {\n        return this._splatTexture;\n    }\n\n    get outlineThickness() {\n        return this._outlineThickness;\n    }\n\n    set outlineThickness(value: number) {\n        this._setOutlineThickness(value);\n    }\n\n    get outlineColor() {\n        return this._outlineColor;\n    }\n\n    set outlineColor(value: Color32) {\n        this._setOutlineColor(value);\n    }\n\n    get worker() {\n        return this._worker;\n    }\n\n    protected _getVertexSource() {\n        return vertexShaderSource;\n    }\n\n    protected _getFragmentSource() {\n        return fragmentShaderSource;\n    }\n}\n\nexport { RenderProgram };\n","import { RenderProgram } from \"../programs/RenderProgram\";\nimport { ShaderProgram } from \"../programs/ShaderProgram\";\nimport { ShaderPass } from \"./ShaderPass\";\n\nclass FadeInPass implements ShaderPass {\n    initialize: (program: ShaderProgram) => void;\n    render: () => void;\n\n    constructor(speed: number = 1.0) {\n        let value = 0.0;\n        let active = false;\n\n        let renderProgram: RenderProgram;\n        let gl: WebGL2RenderingContext;\n        let u_useDepthFade: WebGLUniformLocation;\n        let u_depthFade: WebGLUniformLocation;\n\n        this.initialize = (program: ShaderProgram) => {\n            if (!(program instanceof RenderProgram)) {\n                throw new Error(\"FadeInPass requires a RenderProgram\");\n            }\n\n            value = program.started ? 1.0 : 0.0;\n            active = true;\n            renderProgram = program;\n            gl = program.renderer.gl;\n\n            u_useDepthFade = gl.getUniformLocation(renderProgram.program, \"useDepthFade\") as WebGLUniformLocation;\n            gl.uniform1i(u_useDepthFade, 1);\n\n            u_depthFade = gl.getUniformLocation(renderProgram.program, \"depthFade\") as WebGLUniformLocation;\n            gl.uniform1f(u_depthFade, value);\n        };\n\n        this.render = () => {\n            if (!active || renderProgram.renderData?.updating) return;\n            gl.useProgram(renderProgram.program);\n            value = Math.min(value + speed * 0.01, 1.0);\n            if (value >= 1.0) {\n                active = false;\n                gl.uniform1i(u_useDepthFade, 0);\n            }\n            gl.uniform1f(u_depthFade, value);\n        };\n    }\n\n    dispose() {}\n}\n\nexport { FadeInPass };\n","import type { Scene } from \"../core/Scene\";\nimport { FadeInPass } from \"./webgl/passes/FadeInPass\";\nimport { Camera } from \"../cameras/Camera\";\nimport { Color32 } from \"../math/Color32\";\nimport { ShaderProgram } from \"./webgl/programs/ShaderProgram\";\nimport { RenderProgram } from \"./webgl/programs/RenderProgram\";\nimport { ShaderPass } from \"./webgl/passes/ShaderPass\";\n\nexport class WebGLRenderer {\n    private _canvas: HTMLCanvasElement;\n    private _gl: WebGL2RenderingContext;\n    private _backgroundColor: Color32 = new Color32();\n    private _renderProgram: RenderProgram;\n\n    addProgram: (program: ShaderProgram) => void;\n    removeProgram: (program: ShaderProgram) => void;\n    resize: () => void;\n    setSize: (width: number, height: number) => void;\n    render: (scene: Scene, camera: Camera) => void;\n    dispose: () => void;\n\n    constructor(optionalCanvas: HTMLCanvasElement | null = null, optionalRenderPasses: ShaderPass[] | null = null) {\n        const canvas: HTMLCanvasElement = optionalCanvas || document.createElement(\"canvas\");\n        if (!optionalCanvas) {\n            canvas.style.display = \"block\";\n            canvas.style.boxSizing = \"border-box\";\n            canvas.style.width = \"100%\";\n            canvas.style.height = \"100%\";\n            canvas.style.margin = \"0\";\n            canvas.style.padding = \"0\";\n            document.body.appendChild(canvas);\n        }\n        canvas.style.background = this._backgroundColor.toHexString();\n        this._canvas = canvas;\n\n        this._gl = canvas.getContext(\"webgl2\", { antialias: false }) as WebGL2RenderingContext;\n\n        const renderPasses = optionalRenderPasses || [];\n        if (!optionalRenderPasses) {\n            renderPasses.push(new FadeInPass());\n        }\n\n        this._renderProgram = new RenderProgram(this, renderPasses);\n        const programs = [this._renderProgram] as ShaderProgram[];\n\n        this.resize = () => {\n            const width = canvas.clientWidth;\n            const height = canvas.clientHeight;\n            if (canvas.width !== width || canvas.height !== height) {\n                this.setSize(width, height);\n            }\n        };\n\n        this.setSize = (width: number, height: number) => {\n            canvas.width = width;\n            canvas.height = height;\n            this._gl.viewport(0, 0, canvas.width, canvas.height);\n            for (const program of programs) {\n                program.resize();\n            }\n        };\n\n        this.render = (scene: Scene, camera: Camera) => {\n            for (const program of programs) {\n                program.render(scene, camera);\n            }\n        };\n\n        this.dispose = () => {\n            for (const program of programs) {\n                program.dispose();\n            }\n        };\n\n        this.addProgram = (program: ShaderProgram) => {\n            programs.push(program);\n        };\n\n        this.removeProgram = (program: ShaderProgram) => {\n            const index = programs.indexOf(program);\n            if (index < 0) {\n                throw new Error(\"Program not found\");\n            }\n            programs.splice(index, 1);\n        };\n\n        this.resize();\n    }\n\n    get canvas() {\n        return this._canvas;\n    }\n\n    get gl() {\n        return this._gl;\n    }\n\n    get renderProgram() {\n        return this._renderProgram;\n    }\n\n    get backgroundColor() {\n        return this._backgroundColor;\n    }\n\n    set backgroundColor(value: Color32) {\n        this._backgroundColor = value;\n        this._canvas.style.background = value.toHexString();\n    }\n}\n","import { Camera } from \"../cameras/Camera\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass OrbitControls {\n    minAngle: number = -90;\n    maxAngle: number = 90;\n    minZoom: number = 0.1;\n    maxZoom: number = 30;\n    orbitSpeed: number = 1;\n    panSpeed: number = 1;\n    zoomSpeed: number = 1;\n    dampening: number = 0.12;\n    setCameraTarget: (newTarget: Vector3) => void = () => {};\n    update: () => void;\n    dispose: () => void;\n\n    constructor(\n        camera: Camera,\n        canvas: HTMLElement,\n        alpha: number = 0.5,\n        beta: number = 0.5,\n        radius: number = 5,\n        enableKeyboardControls: boolean = true,\n        inputTarget: Vector3 = new Vector3(),\n    ) {\n        let target = inputTarget.clone();\n\n        let desiredTarget = target.clone();\n        let desiredAlpha = alpha;\n        let desiredBeta = beta;\n        let desiredRadius = radius;\n\n        let dragging = false;\n        let panning = false;\n        let lastDist = 0;\n        let lastX = 0;\n        let lastY = 0;\n\n        const keys: { [key: string]: boolean } = {};\n\n        let isUpdatingCamera = false;\n\n        const onCameraChange = () => {\n            if (isUpdatingCamera) return;\n\n            const eulerRotation = camera.rotation.toEuler();\n            desiredAlpha = -eulerRotation.y;\n            desiredBeta = -eulerRotation.x;\n\n            const x = camera.position.x - desiredRadius * Math.sin(desiredAlpha) * Math.cos(desiredBeta);\n            const y = camera.position.y + desiredRadius * Math.sin(desiredBeta);\n            const z = camera.position.z + desiredRadius * Math.cos(desiredAlpha) * Math.cos(desiredBeta);\n\n            desiredTarget = new Vector3(x, y, z);\n        };\n\n        camera.addEventListener(\"objectChanged\", onCameraChange);\n\n        this.setCameraTarget = (newTarget: Vector3) => {\n            const dx = newTarget.x - camera.position.x;\n            const dy = newTarget.y - camera.position.y;\n            const dz = newTarget.z - camera.position.z;\n            desiredRadius = Math.sqrt(dx * dx + dy * dy + dz * dz);\n            desiredBeta = Math.atan2(dy, Math.sqrt(dx * dx + dz * dz));\n            desiredAlpha = -Math.atan2(dx, dz);\n            desiredTarget = new Vector3(newTarget.x, newTarget.y, newTarget.z);\n        };\n\n        const computeZoomNorm = () => {\n            return 0.1 + (0.9 * (desiredRadius - this.minZoom)) / (this.maxZoom - this.minZoom);\n        };\n\n        const onKeyDown = (e: KeyboardEvent) => {\n            keys[e.code] = true;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = true;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = true;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = true;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = true;\n        };\n\n        const onKeyUp = (e: KeyboardEvent) => {\n            keys[e.code] = false; // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = false;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = false;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = false;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = false;\n        };\n\n        const onMouseDown = (e: MouseEvent) => {\n            preventDefault(e);\n\n            dragging = true;\n            panning = e.button === 2;\n            lastX = e.clientX;\n            lastY = e.clientY;\n            window.addEventListener(\"mouseup\", onMouseUp);\n        };\n\n        const onMouseUp = (e: MouseEvent) => {\n            preventDefault(e);\n\n            dragging = false;\n            panning = false;\n            window.removeEventListener(\"mouseup\", onMouseUp);\n        };\n\n        const onMouseMove = (e: MouseEvent) => {\n            preventDefault(e);\n\n            if (!dragging || !camera) return;\n\n            const dx = e.clientX - lastX;\n            const dy = e.clientY - lastY;\n\n            if (panning) {\n                const zoomNorm = computeZoomNorm();\n                const panX = -dx * this.panSpeed * 0.01 * zoomNorm;\n                const panY = -dy * this.panSpeed * 0.01 * zoomNorm;\n                const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n                const right = new Vector3(R[0], R[3], R[6]);\n                const up = new Vector3(R[1], R[4], R[7]);\n                desiredTarget = desiredTarget.add(right.multiply(panX));\n                desiredTarget = desiredTarget.add(up.multiply(panY));\n            } else {\n                desiredAlpha -= dx * this.orbitSpeed * 0.003;\n                desiredBeta += dy * this.orbitSpeed * 0.003;\n                desiredBeta = Math.min(\n                    Math.max(desiredBeta, (this.minAngle * Math.PI) / 180),\n                    (this.maxAngle * Math.PI) / 180,\n                );\n            }\n\n            lastX = e.clientX;\n            lastY = e.clientY;\n        };\n\n        const onWheel = (e: WheelEvent) => {\n            preventDefault(e);\n\n            const zoomNorm = computeZoomNorm();\n            desiredRadius += e.deltaY * this.zoomSpeed * 0.025 * zoomNorm;\n            desiredRadius = Math.min(Math.max(desiredRadius, this.minZoom), this.maxZoom);\n        };\n\n        const onTouchStart = (e: TouchEvent) => {\n            preventDefault(e);\n\n            if (e.touches.length === 1) {\n                dragging = true;\n                panning = false;\n                lastX = e.touches[0].clientX;\n                lastY = e.touches[0].clientY;\n                lastDist = 0;\n            } else if (e.touches.length === 2) {\n                dragging = true;\n                panning = true;\n                lastX = (e.touches[0].clientX + e.touches[1].clientX) / 2;\n                lastY = (e.touches[0].clientY + e.touches[1].clientY) / 2;\n                const distX = e.touches[0].clientX - e.touches[1].clientX;\n                const distY = e.touches[0].clientY - e.touches[1].clientY;\n                lastDist = Math.sqrt(distX * distX + distY * distY);\n            }\n        };\n\n        const onTouchEnd = (e: TouchEvent) => {\n            preventDefault(e);\n\n            dragging = false;\n            panning = false;\n        };\n\n        const onTouchMove = (e: TouchEvent) => {\n            preventDefault(e);\n\n            if (!dragging || !camera) return;\n\n            if (panning) {\n                const zoomNorm = computeZoomNorm();\n\n                const distX = e.touches[0].clientX - e.touches[1].clientX;\n                const distY = e.touches[0].clientY - e.touches[1].clientY;\n                const dist = Math.sqrt(distX * distX + distY * distY);\n                const delta = lastDist - dist;\n                desiredRadius += delta * this.zoomSpeed * 0.1 * zoomNorm;\n                desiredRadius = Math.min(Math.max(desiredRadius, this.minZoom), this.maxZoom);\n                lastDist = dist;\n\n                const touchX = (e.touches[0].clientX + e.touches[1].clientX) / 2;\n                const touchY = (e.touches[0].clientY + e.touches[1].clientY) / 2;\n                const dx = touchX - lastX;\n                const dy = touchY - lastY;\n                const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n                const right = new Vector3(R[0], R[3], R[6]);\n                const up = new Vector3(R[1], R[4], R[7]);\n                desiredTarget = desiredTarget.add(right.multiply(-dx * this.panSpeed * 0.025 * zoomNorm));\n                desiredTarget = desiredTarget.add(up.multiply(-dy * this.panSpeed * 0.025 * zoomNorm));\n                lastX = touchX;\n                lastY = touchY;\n            } else {\n                const dx = e.touches[0].clientX - lastX;\n                const dy = e.touches[0].clientY - lastY;\n\n                desiredAlpha -= dx * this.orbitSpeed * 0.003;\n                desiredBeta += dy * this.orbitSpeed * 0.003;\n                desiredBeta = Math.min(\n                    Math.max(desiredBeta, (this.minAngle * Math.PI) / 180),\n                    (this.maxAngle * Math.PI) / 180,\n                );\n\n                lastX = e.touches[0].clientX;\n                lastY = e.touches[0].clientY;\n            }\n        };\n\n        const lerp = (a: number, b: number, t: number) => {\n            return (1 - t) * a + t * b;\n        };\n\n        this.update = () => {\n            isUpdatingCamera = true;\n\n            alpha = lerp(alpha, desiredAlpha, this.dampening);\n            beta = lerp(beta, desiredBeta, this.dampening);\n            radius = lerp(radius, desiredRadius, this.dampening);\n            target = target.lerp(desiredTarget, this.dampening);\n\n            const x = target.x + radius * Math.sin(alpha) * Math.cos(beta);\n            const y = target.y - radius * Math.sin(beta);\n            const z = target.z - radius * Math.cos(alpha) * Math.cos(beta);\n            camera.position = new Vector3(x, y, z);\n\n            const direction = target.subtract(camera.position).normalize();\n            const rx = Math.asin(-direction.y);\n            const ry = Math.atan2(direction.x, direction.z);\n            camera.rotation = Quaternion.FromEuler(new Vector3(rx, ry, 0));\n\n            const moveSpeed = 0.025;\n            const rotateSpeed = 0.01;\n\n            const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n            const forward = new Vector3(-R[2], -R[5], -R[8]);\n            const right = new Vector3(R[0], R[3], R[6]);\n\n            if (keys[\"KeyS\"]) desiredTarget = desiredTarget.add(forward.multiply(moveSpeed));\n            if (keys[\"KeyW\"]) desiredTarget = desiredTarget.subtract(forward.multiply(moveSpeed));\n            if (keys[\"KeyA\"]) desiredTarget = desiredTarget.subtract(right.multiply(moveSpeed));\n            if (keys[\"KeyD\"]) desiredTarget = desiredTarget.add(right.multiply(moveSpeed));\n\n            // Add rotation with 'e' and 'q' for horizontal rotation\n            if (keys[\"KeyE\"]) desiredAlpha += rotateSpeed;\n            if (keys[\"KeyQ\"]) desiredAlpha -= rotateSpeed;\n\n            // Add rotation with 'r' and 'f' for vertical rotation\n            if (keys[\"KeyR\"]) desiredBeta += rotateSpeed;\n            if (keys[\"KeyF\"]) desiredBeta -= rotateSpeed;\n\n            isUpdatingCamera = false;\n        };\n\n        const preventDefault = (e: Event) => {\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        this.dispose = () => {\n            canvas.removeEventListener(\"dragenter\", preventDefault);\n            canvas.removeEventListener(\"dragover\", preventDefault);\n            canvas.removeEventListener(\"dragleave\", preventDefault);\n            canvas.removeEventListener(\"contextmenu\", preventDefault);\n\n            canvas.removeEventListener(\"mousedown\", onMouseDown);\n            canvas.removeEventListener(\"mousemove\", onMouseMove);\n            canvas.removeEventListener(\"wheel\", onWheel);\n\n            canvas.removeEventListener(\"touchstart\", onTouchStart);\n            canvas.removeEventListener(\"touchend\", onTouchEnd);\n            canvas.removeEventListener(\"touchmove\", onTouchMove);\n\n            if (enableKeyboardControls) {\n                window.removeEventListener(\"keydown\", onKeyDown);\n                window.removeEventListener(\"keyup\", onKeyUp);\n            }\n        };\n\n        if (enableKeyboardControls) {\n            window.addEventListener(\"keydown\", onKeyDown);\n            window.addEventListener(\"keyup\", onKeyUp);\n        }\n\n        canvas.addEventListener(\"dragenter\", preventDefault);\n        canvas.addEventListener(\"dragover\", preventDefault);\n        canvas.addEventListener(\"dragleave\", preventDefault);\n        canvas.addEventListener(\"contextmenu\", preventDefault);\n\n        canvas.addEventListener(\"mousedown\", onMouseDown);\n        canvas.addEventListener(\"mousemove\", onMouseMove);\n        canvas.addEventListener(\"wheel\", onWheel);\n\n        canvas.addEventListener(\"touchstart\", onTouchStart);\n        canvas.addEventListener(\"touchend\", onTouchEnd);\n        canvas.addEventListener(\"touchmove\", onTouchMove);\n\n        this.update();\n    }\n}\n\nexport { OrbitControls };\n","import { Camera } from \"../cameras/Camera\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass FPSControls {\n    moveSpeed: number = 1.5;\n    lookSpeed: number = 0.7;\n    dampening: number = 0.5;\n    update: () => void;\n    dispose: () => void;\n\n    constructor(camera: Camera, canvas: HTMLCanvasElement) {\n        const keys: { [key: string]: boolean } = {};\n        let pitch = camera.rotation.toEuler().x;\n        let yaw = camera.rotation.toEuler().y;\n        let targetPosition = camera.position;\n        let pointerLock = false;\n\n        const onMouseDown = () => {\n            canvas.requestPointerLock();\n        };\n\n        const onPointerLockChange = () => {\n            pointerLock = document.pointerLockElement === canvas;\n            if (pointerLock) {\n                canvas.addEventListener(\"mousemove\", onMouseMove);\n            } else {\n                canvas.removeEventListener(\"mousemove\", onMouseMove);\n            }\n        };\n\n        const onMouseMove = (e: MouseEvent) => {\n            const mouseX = e.movementX;\n            const mouseY = e.movementY;\n\n            yaw += mouseX * this.lookSpeed * 0.001;\n            pitch -= mouseY * this.lookSpeed * 0.001;\n            pitch = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch));\n        };\n\n        const onKeyDown = (e: KeyboardEvent) => {\n            keys[e.code] = true;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = true;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = true;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = true;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = true;\n        };\n\n        const onKeyUp = (e: KeyboardEvent) => {\n            keys[e.code] = false;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = false;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = false;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = false;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = false;\n            if (e.code === \"Escape\") document.exitPointerLock();\n        };\n\n        this.update = () => {\n            const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n            const forward = new Vector3(-R[2], -R[5], -R[8]);\n            const right = new Vector3(R[0], R[3], R[6]);\n            let move = new Vector3(0, 0, 0);\n            if (keys[\"KeyS\"]) {\n                move = move.add(forward);\n            }\n            if (keys[\"KeyW\"]) {\n                move = move.subtract(forward);\n            }\n            if (keys[\"KeyA\"]) {\n                move = move.subtract(right);\n            }\n            if (keys[\"KeyD\"]) {\n                move = move.add(right);\n            }\n            move = new Vector3(move.x, 0, move.z);\n            if (move.magnitude() > 0) {\n                move = move.normalize();\n            }\n\n            targetPosition = targetPosition.add(move.multiply(this.moveSpeed * 0.01));\n            camera.position = camera.position.add(targetPosition.subtract(camera.position).multiply(this.dampening));\n\n            camera.rotation = Quaternion.FromEuler(new Vector3(pitch, yaw, 0));\n        };\n\n        const preventDefault = (e: Event) => {\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        this.dispose = () => {\n            canvas.removeEventListener(\"dragenter\", preventDefault);\n            canvas.removeEventListener(\"dragover\", preventDefault);\n            canvas.removeEventListener(\"dragleave\", preventDefault);\n            canvas.removeEventListener(\"contextmenu\", preventDefault);\n            canvas.removeEventListener(\"mousedown\", onMouseDown);\n\n            document.removeEventListener(\"pointerlockchange\", onPointerLockChange);\n\n            window.removeEventListener(\"keydown\", onKeyDown);\n            window.removeEventListener(\"keyup\", onKeyUp);\n        };\n\n        window.addEventListener(\"keydown\", onKeyDown);\n        window.addEventListener(\"keyup\", onKeyUp);\n\n        canvas.addEventListener(\"dragenter\", preventDefault);\n        canvas.addEventListener(\"dragover\", preventDefault);\n        canvas.addEventListener(\"dragleave\", preventDefault);\n        canvas.addEventListener(\"contextmenu\", preventDefault);\n        canvas.addEventListener(\"mousedown\", onMouseDown);\n\n        document.addEventListener(\"pointerlockchange\", onPointerLockChange);\n\n        this.update();\n    }\n}\n\nexport { FPSControls };\n","import { Vector3 } from \"./Vector3\";\n\nclass Plane {\n    public readonly normal: Vector3;\n    public readonly point: Vector3;\n\n    constructor(normal: Vector3, point: Vector3) {\n        this.normal = normal;\n        this.point = point;\n    }\n\n    intersect(origin: Vector3, direction: Vector3): Vector3 | null {\n        const denominator = this.normal.dot(direction);\n\n        if (Math.abs(denominator) < 0.0001) {\n            return null;\n        }\n\n        const t = this.normal.dot(this.point.subtract(origin)) / denominator;\n\n        if (t < 0) {\n            return null;\n        }\n\n        return origin.add(direction.multiply(t));\n    }\n}\n\nexport { Plane };\n","import { ShaderProgram } from \"../programs/ShaderProgram\";\n\nclass ShaderPass {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initialize(program: ShaderProgram) {}\n    render() {}\n    dispose() {}\n}\n\nexport { ShaderPass };\n","import { Splatv } from \"../../../splats/Splatv\";\nimport { SplatvData } from \"../../../splats/SplatvData\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ObjectAddedEvent, ObjectChangedEvent, ObjectRemovedEvent } from \"../../../events/Events\";\nimport { Matrix4 } from \"../../../math/Matrix4\";\n\nconst vertexShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\nprecision highp int;\n  \nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\nuniform float time;\n  \nin vec2 position;\nin int index;\n  \nout vec4 vColor;\nout vec2 vPosition;\n  \nvoid main () {\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    uvec4 motion1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 3u, uint(index) >> 10), 0);\n    vec2 trbf = unpackHalf2x16(motion1.w);\n    float dt = time - trbf.x;\n\n    float topacity = exp(-1.0 * pow(dt / trbf.y, 2.0));\n    if(topacity < 0.02) return;\n\n    uvec4 motion0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 2u, uint(index) >> 10), 0);\n    uvec4 static0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2), uint(index) >> 10), 0);\n\n    vec2 m0 = unpackHalf2x16(motion0.x), m1 = unpackHalf2x16(motion0.y), m2 = unpackHalf2x16(motion0.z), \n         m3 = unpackHalf2x16(motion0.w), m4 = unpackHalf2x16(motion1.x); \n      \n    vec4 trot = vec4(unpackHalf2x16(motion1.y).xy, unpackHalf2x16(motion1.z).xy) * dt;\n    vec3 tpos = (vec3(m0.xy, m1.x) * dt + vec3(m1.y, m2.xy) * dt*dt + vec3(m3.xy, m4.x) * dt*dt*dt);\n      \n    vec4 cam = view * vec4(uintBitsToFloat(static0.xyz) + tpos, 1);\n    vec4 pos = projection * cam;\n  \n    float clip = 1.2 * pos.w;\n    if (pos.z < -clip || pos.x < -clip || pos.x > clip || pos.y < -clip || pos.y > clip) return;\n    uvec4 static1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 1u, uint(index) >> 10), 0);\n\n    vec4 rot = vec4(unpackHalf2x16(static0.w).xy, unpackHalf2x16(static1.x).xy) + trot;\n    vec3 scale = vec3(unpackHalf2x16(static1.y).xy, unpackHalf2x16(static1.z).x);\n    rot /= sqrt(dot(rot, rot));\n  \n    mat3 S = mat3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);\n    mat3 R = mat3(\n        1.0 - 2.0 * (rot.z * rot.z + rot.w * rot.w), 2.0 * (rot.y * rot.z - rot.x * rot.w), 2.0 * (rot.y * rot.w + rot.x * rot.z),\n        2.0 * (rot.y * rot.z + rot.x * rot.w), 1.0 - 2.0 * (rot.y * rot.y + rot.w * rot.w), 2.0 * (rot.z * rot.w - rot.x * rot.y),\n        2.0 * (rot.y * rot.w - rot.x * rot.z), 2.0 * (rot.z * rot.w + rot.x * rot.y), 1.0 - 2.0 * (rot.y * rot.y + rot.z * rot.z));\n    mat3 M = S * R;\n    mat3 Vrk = 4.0 * transpose(M) * M;\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n  \n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n  \n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n  \n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      \n    uint rgba = static1.w;\n    vColor = \n        clamp(pos.z/pos.w+1.0, 0.0, 1.0) * \n        vec4(1.0, 1.0, 1.0, topacity) *\n        vec4(\n            (rgba) & 0xffu, \n            (rgba >> 8) & 0xffu, \n            (rgba >> 16) & 0xffu, \n            (rgba >> 24) & 0xffu) / 255.0;\n\n    vec2 vCenter = vec2(pos) / pos.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis / viewport \n        + position.y * minorAxis / viewport, 0.0, 1.0);\n\n    vPosition = position;\n}\n`;\n\nconst fragmentShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\n  \nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n`;\n\nclass VideoRenderProgram extends ShaderProgram {\n    private _renderData: SplatvData | null = null;\n    private _depthIndex: Uint32Array = new Uint32Array();\n    private _splatTexture: WebGLTexture | null = null;\n\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[] = []) {\n        super(renderer, passes);\n\n        const canvas = renderer.canvas;\n        const gl = renderer.gl;\n\n        let worker: Worker;\n\n        let u_projection: WebGLUniformLocation;\n        let u_viewport: WebGLUniformLocation;\n        let u_focal: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_texture: WebGLUniformLocation;\n        let u_time: WebGLUniformLocation;\n\n        let positionAttribute: number;\n        let indexAttribute: number;\n\n        let vertexBuffer: WebGLBuffer;\n        let indexBuffer: WebGLBuffer;\n\n        this._resize = () => {\n            if (!this._camera) return;\n\n            this._camera.data.setSize(canvas.width, canvas.height);\n            this._camera.update();\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n\n            u_viewport = gl.getUniformLocation(this.program, \"viewport\") as WebGLUniformLocation;\n            gl.uniform2fv(u_viewport, new Float32Array([canvas.width, canvas.height]));\n        };\n\n        const setupWorker = () => {\n            if (renderer.renderProgram.worker === null) {\n                console.error(\"Render program is not initialized. Cannot render without worker\");\n                return;\n            }\n            worker = renderer.renderProgram.worker;\n            worker.onmessage = (e) => {\n                if (e.data.depthIndex) {\n                    const { depthIndex } = e.data;\n                    this._depthIndex = depthIndex;\n                    gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n                    gl.bufferData(gl.ARRAY_BUFFER, depthIndex, gl.STATIC_DRAW);\n                }\n            };\n        };\n\n        this._initialize = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            this._resize();\n\n            this._scene.addEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.addEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splatv) {\n                    if (this._renderData === null) {\n                        this._renderData = object.data;\n                        object.addEventListener(\"objectChanged\", handleObjectChanged);\n                    } else {\n                        console.warn(\"Multiple Splatv objects are not currently supported\");\n                    }\n                }\n            }\n\n            if (this._renderData === null) {\n                console.error(\"Cannot render without Splatv object\");\n                return;\n            }\n\n            u_focal = gl.getUniformLocation(this.program, \"focal\") as WebGLUniformLocation;\n            gl.uniform2fv(u_focal, new Float32Array([this._camera.data.fx, this._camera.data.fy]));\n\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            this._splatTexture = gl.createTexture() as WebGLTexture;\n            u_texture = gl.getUniformLocation(this.program, \"u_texture\") as WebGLUniformLocation;\n            gl.uniform1i(u_texture, 0);\n\n            u_time = gl.getUniformLocation(this.program, \"time\") as WebGLUniformLocation;\n            gl.uniform1f(u_time, Math.sin(Date.now() / 1000) / 2 + 1 / 2);\n\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), gl.STATIC_DRAW);\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            indexBuffer = gl.createBuffer() as WebGLBuffer;\n            indexAttribute = gl.getAttribLocation(this.program, \"index\");\n            gl.enableVertexAttribArray(indexAttribute);\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n\n            setupWorker();\n\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, this._splatTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texImage2D(\n                gl.TEXTURE_2D,\n                0,\n                gl.RGBA32UI,\n                this._renderData.width,\n                this._renderData.height,\n                0,\n                gl.RGBA_INTEGER,\n                gl.UNSIGNED_INT,\n                this._renderData.data,\n            );\n\n            const positions = this._renderData.positions;\n            const dummyTransforms = new Float32Array(new Matrix4().buffer);\n            const dummyTransformIndices = new Uint32Array(this._renderData.vertexCount);\n            dummyTransformIndices.fill(0);\n            worker.postMessage(\n                {\n                    sortData: {\n                        positions: positions,\n                        transforms: dummyTransforms,\n                        transformIndices: dummyTransformIndices,\n                        vertexCount: this._renderData.vertexCount,\n                    },\n                },\n                [positions.buffer, dummyTransforms.buffer, dummyTransformIndices.buffer],\n            );\n        };\n\n        const handleObjectAdded = (event: Event) => {\n            const e = event as ObjectAddedEvent;\n\n            if (e.object instanceof Splatv) {\n                if (this._renderData === null) {\n                    this._renderData = e.object.data;\n                    e.object.addEventListener(\"objectChanged\", handleObjectChanged);\n                } else {\n                    console.warn(\"Splatv not supported by default RenderProgram. Use VideoRenderProgram instead.\");\n                }\n            }\n\n            this.dispose();\n        };\n\n        const handleObjectRemoved = (event: Event) => {\n            const e = event as ObjectRemovedEvent;\n\n            if (e.object instanceof Splatv) {\n                if (this._renderData === e.object.data) {\n                    this._renderData = null;\n                    e.object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                }\n            }\n\n            this.dispose();\n        };\n\n        const handleObjectChanged = (event: Event) => {\n            const e = event as ObjectChangedEvent;\n\n            if (e.object instanceof Splatv && this._renderData === e.object.data) {\n                this.dispose();\n            }\n        };\n\n        this._render = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            if (!this._renderData) {\n                console.warn(\"Cannot render without Splatv object\");\n                return;\n            }\n\n            this._camera.update();\n            worker.postMessage({ viewProj: this._camera.data.viewProj.buffer });\n\n            gl.viewport(0, 0, canvas.width, canvas.height);\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n\n            gl.disable(gl.DEPTH_TEST);\n            gl.enable(gl.BLEND);\n            gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.ONE, gl.ONE_MINUS_DST_ALPHA, gl.ONE);\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n            gl.uniform1f(u_time, Math.sin(Date.now() / 1000) / 2 + 1 / 2);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this._depthIndex, gl.STATIC_DRAW);\n            gl.vertexAttribIPointer(indexAttribute, 1, gl.INT, 0, 0);\n            gl.vertexAttribDivisor(indexAttribute, 1);\n\n            gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 4, this._renderData.vertexCount);\n        };\n\n        this._dispose = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot dispose without scene and camera\");\n                return;\n            }\n\n            this._scene.removeEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.removeEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splatv) {\n                    if (this._renderData === object.data) {\n                        this._renderData = null;\n                        object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                    }\n                }\n            }\n\n            worker?.terminate();\n\n            gl.deleteTexture(this._splatTexture);\n\n            gl.deleteBuffer(indexBuffer);\n            gl.deleteBuffer(vertexBuffer);\n        };\n    }\n\n    get renderData(): SplatvData | null {\n        return this._renderData;\n    }\n\n    protected _getVertexSource(): string {\n        return vertexShaderSource;\n    }\n\n    protected _getFragmentSource(): string {\n        return fragmentShaderSource;\n    }\n}\n\nexport { VideoRenderProgram };\n","import { Box3 } from \"./Box3\";\n\nclass BVHNode {\n    public left: BVHNode | null = null;\n    public right: BVHNode | null = null;\n    public pointIndices: number[] = [];\n\n    constructor(\n        public bounds: Box3,\n        public boxes: Box3[],\n        pointIndices: number[],\n    ) {\n        if (pointIndices.length > 1) {\n            this.split(bounds, boxes, pointIndices);\n        } else if (pointIndices.length > 0) {\n            this.pointIndices = pointIndices;\n        }\n    }\n\n    private split(bounds: Box3, boxes: Box3[], pointIndices: number[]) {\n        const axis = bounds.size().maxComponent();\n        pointIndices.sort((a, b) => boxes[a].center().getComponent(axis) - boxes[b].center().getComponent(axis));\n\n        const mid = Math.floor(pointIndices.length / 2);\n        const leftIndices = pointIndices.slice(0, mid);\n        const rightIndices = pointIndices.slice(mid);\n\n        this.left = new BVHNode(bounds, boxes, leftIndices);\n        this.right = new BVHNode(bounds, boxes, rightIndices);\n    }\n\n    public queryRange(range: Box3): number[] {\n        if (!this.bounds.intersects(range)) {\n            return [];\n        } else if (this.left !== null && this.right !== null) {\n            return this.left.queryRange(range).concat(this.right.queryRange(range));\n        } else {\n            return this.pointIndices.filter((index) => range.intersects(this.boxes[index]));\n        }\n    }\n}\n\nclass BVH {\n    public root: BVHNode;\n\n    constructor(bounds: Box3, boxes: Box3[]) {\n        const pointIndices = boxes.map((_, index) => index);\n        this.root = new BVHNode(bounds, boxes, pointIndices);\n    }\n\n    public queryRange(range: Box3) {\n        return this.root.queryRange(range);\n    }\n}\n\nexport { BVH };\n","import { Camera } from \"../../../cameras/Camera\";\nimport { Vector3 } from \"../../../math/Vector3\";\nimport { Splat } from \"../../../splats/Splat\";\nimport { RenderProgram } from \"../programs/RenderProgram\";\nimport { Box3 } from \"../../../math/Box3\";\nimport { BVH } from \"../../../math/BVH\";\nimport { RenderData } from \"./RenderData\";\n\nclass IntersectionTester {\n    testPoint: (x: number, y: number) => Splat | null;\n\n    constructor(renderProgram: RenderProgram, maxDistance: number = 100, resolution: number = 1.0) {\n        let vertexCount = 0;\n        let bvh: BVH | null = null;\n        let lookup: Splat[] = [];\n\n        const build = () => {\n            if (renderProgram.renderData === null) {\n                console.error(\"IntersectionTester cannot be called before renderProgram has been initialized\");\n                return;\n            }\n            lookup = [];\n            const renderData = renderProgram.renderData as RenderData;\n            const boxes = new Array<Box3>(renderData.offsets.size);\n            let i = 0;\n            const bounds = new Box3(\n                new Vector3(Infinity, Infinity, Infinity),\n                new Vector3(-Infinity, -Infinity, -Infinity),\n            );\n            for (const splat of renderData.offsets.keys()) {\n                const splatBounds = splat.bounds;\n                boxes[i++] = splatBounds;\n                bounds.expand(splatBounds.min);\n                bounds.expand(splatBounds.max);\n                lookup.push(splat);\n            }\n            bounds.permute();\n            bvh = new BVH(bounds, boxes);\n            vertexCount = renderData.vertexCount;\n        };\n\n        this.testPoint = (x: number, y: number) => {\n            if (renderProgram.renderData === null || renderProgram.camera === null) {\n                console.error(\"IntersectionTester cannot be called before renderProgram has been initialized\");\n                return null;\n            }\n\n            build();\n\n            if (bvh === null) {\n                console.error(\"Failed to build octree for IntersectionTester\");\n                return null;\n            }\n\n            const renderData = renderProgram.renderData as RenderData;\n            const camera = renderProgram.camera as Camera;\n\n            if (vertexCount !== renderData.vertexCount) {\n                console.warn(\"IntersectionTester has not been rebuilt since the last render\");\n            }\n\n            const ray = camera.screenPointToRay(x, y);\n            for (let x = 0; x < maxDistance; x += resolution) {\n                const point = camera.position.add(ray.multiply(x));\n                const minPoint = new Vector3(\n                    point.x - resolution / 2,\n                    point.y - resolution / 2,\n                    point.z - resolution / 2,\n                );\n                const maxPoint = new Vector3(\n                    point.x + resolution / 2,\n                    point.y + resolution / 2,\n                    point.z + resolution / 2,\n                );\n                const queryBox = new Box3(minPoint, maxPoint);\n                const points = bvh.queryRange(queryBox);\n                if (points.length > 0) {\n                    return lookup[points[0]];\n                }\n            }\n\n            return null;\n        };\n    }\n}\n\nexport { IntersectionTester };\n"],"names":["Vector3","x","y","z","v","t","axis","length","value","Quaternion","w","q","l","w1","x1","y1","z1","w2","x2","y2","z2","vecQuat","conjugate","rotatedQuat","e","halfX","halfY","halfZ","cy","sy","cp","sp","cz","sz","sinr_cosp","cosr_cosp","sinp","siny_cosp","cosy_cosp","matrix","m","trace","s","angle","halfAngle","sin","cos","direction","forward","dot","rotAngle","rotAxis","EventDispatcher","listeners","type","listener","event","Matrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","i","a","b","det","invDet","position","rotation","scale","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","ObjectAddedEvent","object","ObjectRemovedEvent","ObjectChangedEvent","Object3D","Matrix3","cx","rotationMatrix","SplatData","vertexCount","positions","rotations","scales","colors","translation","R","currentRotation","newRot","data","f_buffer","u_buffer","selection","SplatvData","width","height","buffer","Converter","header","properties","property","headerBuffer","plyRowLength","plyLength","output","offset","f_dc_offset","opacity_offset","scale_offset","rot_offset","pos0","pos1","pos2","f_dc_0","f_dc_1","f_dc_2","alpha","opacity","scale0","scale1","scale2","rot0","rot1","rot2","rot3","Box3","min","max","point","box","Splat","splat","name","format","now","splatClone","blob","plyData","link","selected","center","size","Splatv","CameraData","fx","fy","near","far","Vector4","Camera","camera","clipSpaceCoords","inverseProjectionMatrix","cameraSpaceCoords","inverseViewMatrix","worldSpaceCoords","Scene","index","predicate","objectsToRemove","buffers","mergedSplatData","mergedData","initiateFetchRequest","url","useCache","req","loadDataIntoBuffer","res","onProgress","reader","contentLength","estimatedBytes","chunks","receivedLength","done","rawProgress","cappedProgress","chunk","Loader","scene","file","resolve","arrayBuffer","PLYLoader","inputBuffer","ubuf","headerText","header_end","header_end_index","rowOffset","offsets","prop","k","_p","dataView","q_polycam","rgba","rot","r0","r1","r2","r3","temp","SplatvLoader","splatv","result","handleChunk","intView","splatChunks","cameras","cameraData","inputOffset","sizeToRead","ShaderProgram","renderer","passes","gl","vertexShader","fragmentShader","pass","createDataModule","moduleArg","moduleRtn","Module","_scriptName","scriptDirectory","readBinary","xhr","wasmBinary","readyPromiseResolve","wasmMemory","HEAPU8","runtimeInitialized","updateMemoryViews","preRun","addOnPreRun","callRuntimeCallbacks","onPreRuns","initRuntime","wasmExports","postRun","addOnPostRun","onPostRuns","wasmBinaryFile","findWasmBinary","base64Decode","getBinarySync","instantiateSync","info","module","binary","instance","getWasmImports","wasmImports","createWasm","receiveInstance","assignWasmExports","reject","mod","inst","callbacks","cb","b64","b1","b2","j","bLength","base64ReverseLookup","getHeapMax","alignMemory","alignment","growMemory","oldHeapSize","pages","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","newSize","replacement","run","doRun","createDataWorker","DataWorker","RenderData","splatIndex","lookup","updateTransform","updateColorTransforms","colorTransformsChanged","colorTransformsMap","colorTransform","colorTransformIndex","response","wasmModule","initWasm","waitForWasm","buildImmediate","positionsPtr","rotationsPtr","scalesPtr","colorsPtr","selectionPtr","dataPtr","worldPositionsPtr","worldRotationsPtr","worldScalesPtr","outData","worldPositions","worldRotations","worldScales","build","serializedSplat","key","Color32","r","g","createSortWorker","SortWorker","vertexShaderSource","fragmentShaderSource","RenderProgram","canvas","u_projection","u_viewport","u_focal","u_view","u_texture","u_transforms","u_transformIndices","u_colorTransforms","u_colorTransformIndices","u_outlineThickness","u_outlineColor","positionAttribute","indexAttribute","transformsTexture","transformIndicesTexture","colorTransformsTexture","colorTransformIndicesTexture","vertexBuffer","indexBuffer","createWorker","depthIndex","handleObjectAdded","handleObjectRemoved","handleObjectChanged","resetSplatData","detachedPositions","detachedTransforms","detachedTransformIndices","FadeInPass","speed","active","renderProgram","u_useDepthFade","u_depthFade","program","WebGLRenderer","optionalCanvas","optionalRenderPasses","renderPasses","programs","OrbitControls","beta","radius","enableKeyboardControls","inputTarget","target","desiredTarget","desiredAlpha","desiredBeta","desiredRadius","dragging","panning","lastDist","lastX","lastY","keys","isUpdatingCamera","onCameraChange","eulerRotation","newTarget","dx","dy","dz","computeZoomNorm","onKeyDown","onKeyUp","onMouseDown","preventDefault","onMouseUp","onMouseMove","zoomNorm","panX","panY","right","up","onWheel","onTouchStart","distX","distY","onTouchEnd","onTouchMove","dist","delta","touchX","touchY","lerp","rx","ry","moveSpeed","rotateSpeed","FPSControls","pitch","yaw","targetPosition","pointerLock","onPointerLockChange","mouseX","mouseY","move","Plane","normal","origin","denominator","ShaderPass","VideoRenderProgram","worker","u_time","setupWorker","dummyTransforms","dummyTransformIndices","BVHNode","bounds","boxes","pointIndices","mid","leftIndices","rightIndices","range","BVH","_","IntersectionTester","maxDistance","resolution","bvh","renderData","splatBounds","ray","minPoint","maxPoint","queryBox","points"],"mappings":"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C,IAAID,EAAE,EAAE;AAAA,MACtDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,EAAE,IAAIC,EAAE,CAAC,IAAID,EAAE,EAAE;AAAA,MACtDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,EAAE;AAAA,MACrDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,EAAE;AAAA,MACrDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,EAAE,IAAIC,EAAE,CAAC,IAAID,EAAE,EAAE;AAAA,MACtDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,EAAE,IAAIC,EAAE,CAAC,IAAID,EAAE,EAAE;AAAA,MACtDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE;AAAA,MACvDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE;AAAA,MACvDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE;AAAA,MACxDC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,CAAC,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE;AAAA,MACxDC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE;AAAA,MACzDC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE;AAAA,MACzDC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE;AAAA,MAC1DC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,CAAC,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE,IAAIC,EAAE,EAAE,IAAID,EAAE,EAAE;AAAA,IAAA;AAAA,EAElE;AAAA,EAEA,QAAiB;AACb,UAAMnD,IAAI,KAAK;AAEf,WAAO,IAAIiC;AAAA,MACPjC,EAAE,CAAC;AAAA,MAAGA,EAAE,CAAC;AAAA,MAAGA,EAAE,CAAC;AAAA,MAAGA,EAAE,CAAC;AAAA,MACrBA,EAAE,CAAC;AAAA,MAAGA,EAAE,CAAC;AAAA,MAAGA,EAAE,CAAC;AAAA,MAAGA,EAAE,CAAC;AAAA,MACrBA,EAAE,CAAC;AAAA,MAAGA,EAAE,CAAC;AAAA,MAAGA,EAAE,EAAE;AAAA,MAAGA,EAAE,EAAE;AAAA,MACvBA,EAAE,EAAE;AAAA,MAAGA,EAAE,EAAE;AAAA,MAAGA,EAAE,EAAE;AAAA,MAAGA,EAAE,EAAE;AAAA,IAAA;AAAA,EAEjC;AAAA,EAEA,cAAsB;AAClB,UAAMA,IAAI,KAAK;AAEf,WACIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAClHA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAChHA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAClHA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IACpHA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAClHA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,CAAC,IAAIA,EAAE,EAAE,IAAIA,EAAE,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"}